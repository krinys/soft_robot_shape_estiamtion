{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3842,"status":"ok","timestamp":1662973808447,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"VFoTWnzu61va","outputId":"18a15310-7234-47d9-cdb8-a507ebc70ac9"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')\n"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":8511,"status":"ok","timestamp":1662973816955,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"-oG0kZv9si8R","outputId":"85791036-552a-42d9-ff3f-df1d418022cc"},"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: graphviz in /usr/local/lib/python3.7/dist-packages (0.10.1)\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: tensorflow_addons in /usr/local/lib/python3.7/dist-packages (0.17.1)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.7/dist-packages (from tensorflow_addons) (21.3)\n","Requirement already satisfied: typeguard>=2.7 in /usr/local/lib/python3.7/dist-packages (from tensorflow_addons) (2.7.1)\n","Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging->tensorflow_addons) (3.0.9)\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: tensorboardcolab in /usr/local/lib/python3.7/dist-packages (0.0.22)\n"]}],"source":["!pip install graphviz\n","!pip install tensorflow_addons\n","!pip install tensorboardcolab\n"]},{"cell_type":"code","execution_count":3,"metadata":{"executionInfo":{"elapsed":4607,"status":"ok","timestamp":1662973821557,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"tuTZmldQspWx"},"outputs":[],"source":["from    keras.utils.vis_utils    import plot_model\n","from tensorboardcolab import TensorBoardColab\n","\n","\n"]},{"cell_type":"code","execution_count":4,"metadata":{"executionInfo":{"elapsed":5,"status":"ok","timestamp":1662973821557,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"FulUlypqBY_L"},"outputs":[],"source":["# %load_ext tensorboard\n","# %tensorboard --logdir ./"]},{"cell_type":"code","execution_count":5,"metadata":{"executionInfo":{"elapsed":3704,"status":"ok","timestamp":1662973825257,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"ni5CWTqe-BlK"},"outputs":[],"source":["import tensorflow as tf\n","import tensorflow.keras as keras\n","import tensorflow_datasets as tfds\n","import pandas as pd\n","import os\n","from tensorflow.python.keras.utils.vis_utils import plot_model\n","import torch\n","import torchvision\n","from torch import nn\n","from torch.autograd import Variable\n","from torch.utils.data import DataLoader\n","from torchvision import transforms\n","from torchvision.utils import save_image\n","from torchvision.datasets import MNIST\n","import tensorflow_addons as tfa\n","import datetime\n","from torch.utils.data import DataLoader\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from IPython import display\n","import os\n","import cv2\n","from imutils import paths\n","import cv2\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from tensorflow.keras.models import Model\n","from tensorflow.python.keras.utils.vis_utils import plot_model\n","import torch\n","from torch import nn\n","from tqdm.auto import tqdm\n","from torchvision import transforms\n","from sklearn.model_selection import train_test_split"]},{"cell_type":"code","execution_count":6,"metadata":{"executionInfo":{"elapsed":19,"status":"ok","timestamp":1662973825258,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"SuW_0t8KjNxx"},"outputs":[],"source":[" tf.config.run_functions_eagerly(True)\n","#tf.config.experimental_run_functions_eagerly(True)"]},{"cell_type":"code","execution_count":7,"metadata":{"executionInfo":{"elapsed":18,"status":"ok","timestamp":1662973825258,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"thRQsPxB-N1o"},"outputs":[],"source":["def plot_results(images, n_cols=None):\n","    '''visualizes fake images'''\n","    display.clear_output(wait=False)  \n","\n","    n_cols = n_cols or len(images)\n","    n_rows = (len(images) - 1) // n_cols + 1\n","\n","    if images.shape[-1] == 1:\n","        images = np.squeeze(images, axis=-1)\n","\n","    plt.figure(figsize=(n_cols, n_rows))\n","    \n","    for index, image in enumerate(images):\n","        plt.subplot(n_rows, n_cols, index + 1)\n","        plt.imshow(image, cmap=\"binary\")\n","        plt.axis(\"off\")"]},{"cell_type":"markdown","metadata":{"id":"Lv-Hi7jy_RQK"},"source":["# 载入数据"]},{"cell_type":"code","execution_count":8,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":17,"status":"ok","timestamp":1662973825258,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"7ihJ_NuF-ToG","outputId":"2bae714b-f034-47ad-fe0e-ed504ebcc618"},"outputs":[{"output_type":"stream","name":"stdout","text":["[INFO] 开始读取数据\n"]}],"source":["img_path = '/content/drive/MyDrive/Colab Notebooks/fianl_project/dataset/contour2_all_part/'\n","print(\"[INFO] 开始读取数据\")\n","data_contour = []\n","\n","img_list=os.listdir(img_path)\n","img_list.sort()\n","img_list.sort(key = lambda x: int(x[:-4])) ##文件名按数字排序\n","img_nums=len(img_list)\n","sorted_list=[]\n","for i in range(img_nums):\n","    img_name=img_path+img_list[i]\n","    sorted_list.append(img_name)\n","    #print(img_name)\n","\n","\n"]},{"cell_type":"code","execution_count":9,"metadata":{"executionInfo":{"elapsed":17,"status":"ok","timestamp":1662973825259,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"BJqzsGyxtg_N"},"outputs":[],"source":["def binary(img,thresh):\n","  height, width = img.shape[0:2]\n","  for row in range(height):\n","    for col in range(width):\n","        # 获取到灰度值\n","        gray = img[row, col]\n","        # 如果灰度值高于阈值 就等于255最大值\n","        if gray > thresh:\n","            img[row, col] = 1\n","        # 如果小于阈值，就直接改为0\n","        elif gray < thresh:\n","            img[row, col] = 0\n","  return img"]},{"cell_type":"code","execution_count":10,"metadata":{"executionInfo":{"elapsed":4112,"status":"ok","timestamp":1662973829355,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"l2lpW7CU-rib"},"outputs":[],"source":["# 3 遍历读取数据\n","data_contour = []\n","img_size=300\n","for imagePath in sorted_list:\n","    # 3.1 读取图像数据，由于使用神经网络，需要给定成一维\n","    #print(imagePath)\n","    image = cv2.imread(imagePath,0)   #读取图像\n","    image = np.array(image, dtype=\"float\") / 255.0\n","    #print(image.shape)\n","    image=cv2.resize(image,(img_size,img_size))\n","    data_contour.append(image)   #在data的末尾，追加image数据\n"]},{"cell_type":"code","execution_count":11,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":287},"executionInfo":{"elapsed":1015,"status":"ok","timestamp":1662973830367,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"MMDka2OhOANP","outputId":"763e3554-1719-4994-99d9-bebe1dd6b18b"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.image.AxesImage at 0x7f5589207d10>"]},"metadata":{},"execution_count":11},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["plt.imshow(data_contour[400])"]},{"cell_type":"code","execution_count":43,"metadata":{"executionInfo":{"elapsed":659,"status":"ok","timestamp":1662975500129,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"GU7A5ZiVUW1v"},"outputs":[],"source":["initial_img=np.expand_dims(np.array(data_contour[400]), axis=0)\n"]},{"cell_type":"code","execution_count":44,"metadata":{"id":"MrDEAYDcmYqI","executionInfo":{"status":"ok","timestamp":1662975503745,"user_tz":-480,"elapsed":529,"user":{"displayName":"秦时","userId":"13785341033606597227"}}},"outputs":[],"source":["initial_img=np.repeat(initial_img,982, axis=0)"]},{"cell_type":"code","execution_count":15,"metadata":{"executionInfo":{"elapsed":3,"status":"ok","timestamp":1662973858358,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"VwldIK3-VNqO"},"outputs":[],"source":["\n","#initial_img=np.repeat(initial_img,770, axis=0)\n","X_train_initial=np.repeat(initial_img,764, axis=0)\n","X_train_initial.shape\n","X_train_initial=np.reshape(X_train_initial,(-1,img_size,img_size,1))\n"]},{"cell_type":"code","execution_count":16,"metadata":{"executionInfo":{"elapsed":3,"status":"ok","timestamp":1662973860757,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"DYjl0iBocqjP"},"outputs":[],"source":["X_test_initial=np.repeat(initial_img,218, axis=0)\n","X_test_initial.shape\n","X_test_initial=np.reshape(X_test_initial,(-1,img_size,img_size,1))"]},{"cell_type":"code","execution_count":17,"metadata":{"executionInfo":{"elapsed":3,"status":"ok","timestamp":1662973863357,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"4AibfaunkfnD"},"outputs":[],"source":["X_train_initial=np.array(X_train_initial)"]},{"cell_type":"code","execution_count":18,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":949,"status":"ok","timestamp":1662973867584,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"fwa5NIeXJlNH","outputId":"cc001468-9817-4cd1-d75c-7c01d0cd90dc"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(764, 300, 300, 1)"]},"metadata":{},"execution_count":18}],"source":["X_train_initial.shape"]},{"cell_type":"markdown","metadata":{"id":"W2YB6-LO53Pb"},"source":[]},{"cell_type":"code","execution_count":19,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":287},"executionInfo":{"elapsed":703,"status":"ok","timestamp":1662973870786,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"3KvnQixRTQdB","outputId":"c33a7400-0562-4d3a-e772-8bec13bc4d9c"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.image.AxesImage at 0x7f55891de1d0>"]},"metadata":{},"execution_count":19},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["a=np.reshape(X_train_initial[400],(img_size,img_size))\n","plt.imshow(a)"]},{"cell_type":"code","execution_count":20,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3,"status":"ok","timestamp":1662973872412,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"xInz2cSFW9aW","outputId":"40a4269b-defa-4eb9-d322-b89ec9346ca2"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(218, 300, 300, 1)"]},"metadata":{},"execution_count":20}],"source":["\n","X_test_initial.shape"]},{"cell_type":"code","execution_count":21,"metadata":{"executionInfo":{"elapsed":810,"status":"ok","timestamp":1662973879025,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"73e4K6xIfQuj"},"outputs":[],"source":["\n","data_contours=np.array(data_contour)\n","#data_contours=np.random.shuffle(data_contours)\n"]},{"cell_type":"code","execution_count":22,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3,"status":"ok","timestamp":1662973879976,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"VqZLfbng-xkW","outputId":"65ad3bfb-19a2-4ab3-c125-e6e7ae2913ac"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(982, 3)"]},"metadata":{},"execution_count":22}],"source":["signal=pd.read_csv(\"/content/drive/MyDrive/Colab Notebooks/fianl_project/dataset/all_part_sensor.csv\")\n","#signal.head(5)\n","signal=np.array(signal)\n","signal=signal[0:982,1:4]\n","signal=signal-signal[400,:]\n","signal.shape"]},{"cell_type":"code","execution_count":23,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3,"status":"ok","timestamp":1662973881381,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"QRKGzYLCGV16","outputId":"8d7d427c-2c71-40b0-da1e-d20ab7413e3f"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0.32305131, 0.32529996, 0.        ],\n","       [0.32531713, 0.32442453, 0.        ],\n","       [0.32476784, 0.32608957, 0.        ],\n","       [0.32337745, 0.32509398, 0.        ],\n","       [0.32342894, 0.32536863, 0.        ]])"]},"metadata":{},"execution_count":23}],"source":["def normalization(data):\n","    range = np.max(data) - np.min(data)\n","    return (data - np.min(data)) / range\n","signal_data=normalization(signal)\n","signal_data[0:5,]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"WVkcxWM80qcK"},"outputs":[],"source":["signal.max(axis=0)"]},{"cell_type":"code","execution_count":24,"metadata":{"executionInfo":{"elapsed":803,"status":"ok","timestamp":1662973887682,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"aq99zo6DTAMe"},"outputs":[],"source":["X_train, X_test, y_train, y_test = train_test_split(data_contours, signal_data, test_size=0.221, random_state=45)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"x3RezkkJSxrE"},"outputs":[],"source":["X_train.shape"]},{"cell_type":"code","execution_count":25,"metadata":{"executionInfo":{"elapsed":608,"status":"ok","timestamp":1662973892476,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"Lkm6RYrbh9xu"},"outputs":[],"source":["X_train=np.reshape(X_train,(-1,img_size,img_size,1))\n","X_test=np.reshape(X_test,(-1,img_size,img_size,1))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"uRhkfKR3ifus"},"outputs":[],"source":["\n","y_test.shape"]},{"cell_type":"code","execution_count":26,"metadata":{"executionInfo":{"elapsed":476,"status":"ok","timestamp":1662973895872,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"FbWExNYp3lVS"},"outputs":[],"source":["def generate_and_save_images(model, epoch, step, test_input,img_size):\n","  \"\"\"Helper function to plot our 16 images\n","\n","  Args:\n","\n","  model -- the decoder model\n","  epoch -- current epoch number during training\n","  step -- current step number during training\n","  test_input -- random tensor with shape (16, LATENT_DIM)\n","  \"\"\"\n","  predictions = model.predict(test_input)\n","  predictions=np.array(predictions)\n","\n","  fig = plt.figure(figsize=(6,6))\n","\n","  for i in range(predictions.shape[0]):\n","      plt.subplot(6, 6, i+1)\n","      img = predictions[i, :, :] * 255\n","      img=np.reshape(img,[img_size,img_size])\n","      img = img.astype('int32')\n","      plt.imshow(img)\n","      plt.axis('off')\n","\n","  # tight_layout minimizes the overlap between 2 sub-plots\n","  fig.suptitle(\"epoch: {}, step: {}\".format(epoch, step))\n","  plt.savefig('image_at_epoch_{:04d}_step{:04d}.png'.format(epoch, step))\n","  plt.show()"]},{"cell_type":"markdown","metadata":{"id":"qJsydjZoZZ_M"},"source":["## 构建tensorflow 数据集"]},{"cell_type":"code","execution_count":27,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4904,"status":"ok","timestamp":1662973904400,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"lb2vynw12h56","outputId":"8518c3a4-4902-428a-e332-fa2f69e6b9c8"},"outputs":[{"output_type":"stream","name":"stdout","text":["number of batches in the training set: 26\n","number of batches in the validation set: 8\n"]}],"source":["\n","# get the list containing the image paths\n","\n","\n","BATCH_SIZE=30\n","\n","# split the paths list into to training (80%) and validation sets(20%).\n","\n","\n","# load the training image paths into tensors, create batches and shuffle\n","training_dataset1 = tf.data.Dataset.from_tensor_slices((X_train_initial,y_train))\n","training_dataset2 = tf.data.Dataset.from_tensor_slices((X_train))\n","training_datasets = tf.data.Dataset.zip((training_dataset1, training_dataset2))\n","training_dataset = training_datasets.shuffle(1000).batch(BATCH_SIZE)\n","\n","# load the validation image paths into tensors and create batches\n","validation_dataset1 = tf.data.Dataset.from_tensor_slices((X_test_initial,y_test))\n","validation_dataset2 = tf.data.Dataset.from_tensor_slices((X_test))\n","#validation_dataset = validation_dataset.map(map_image)\n","validation_dataset = tf.data.Dataset.zip((validation_dataset1, validation_dataset2))\n","validation_dataset = validation_dataset.batch(BATCH_SIZE)\n","\n","\n","print(f'number of batches in the training set: {len(training_dataset)}')\n","print(f'number of batches in the validation set: {len(validation_dataset)}')"]},{"cell_type":"code","execution_count":28,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":733},"executionInfo":{"elapsed":1668,"status":"ok","timestamp":1662973906053,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"cNC_eN6cK1Hm","outputId":"6f70f721-701b-4307-b141-34632293f43d"},"outputs":[{"output_type":"stream","name":"stdout","text":["tf.Tensor([300 300   1], shape=(3,), dtype=int32)\n","tf.Tensor([300 300   1], shape=(3,), dtype=int32)\n","tf.Tensor([300 300   1], shape=(3,), dtype=int32)\n","tf.Tensor([300 300   1], shape=(3,), dtype=int32)\n","tf.Tensor([300 300   1], shape=(3,), dtype=int32)\n","tf.Tensor([300 300   1], shape=(3,), dtype=int32)\n","tf.Tensor([300 300   1], shape=(3,), dtype=int32)\n","tf.Tensor([300 300   1], shape=(3,), dtype=int32)\n","tf.Tensor([300 300   1], shape=(3,), dtype=int32)\n","tf.Tensor([300 300   1], shape=(3,), dtype=int32)\n","tf.Tensor([300 300   1], shape=(3,), dtype=int32)\n","tf.Tensor([300 300   1], shape=(3,), dtype=int32)\n","tf.Tensor([300 300   1], shape=(3,), dtype=int32)\n","tf.Tensor([300 300   1], shape=(3,), dtype=int32)\n","tf.Tensor([300 300   1], shape=(3,), dtype=int32)\n","tf.Tensor([300 300   1], shape=(3,), dtype=int32)\n","tf.Tensor([300 300   1], shape=(3,), dtype=int32)\n","tf.Tensor([300 300   1], shape=(3,), dtype=int32)\n","tf.Tensor([300 300   1], shape=(3,), dtype=int32)\n","tf.Tensor([300 300   1], shape=(3,), dtype=int32)\n","tf.Tensor([300 300   1], shape=(3,), dtype=int32)\n","tf.Tensor([300 300   1], shape=(3,), dtype=int32)\n","tf.Tensor([300 300   1], shape=(3,), dtype=int32)\n","tf.Tensor([300 300   1], shape=(3,), dtype=int32)\n","tf.Tensor([300 300   1], shape=(3,), dtype=int32)\n","tf.Tensor([300 300   1], shape=(3,), dtype=int32)\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["\n","for step, x_batch_train in enumerate(training_dataset):\n","  #arr1 = np.array(x_batch_train,dtype=float)\n","  #x_batch_train[1]=tf.convert_to_tensor(x_batch_train[1])\n","  #x_batch_train[1]= tf.reshape(x_batch_train[1],[-1,300,300,1])\n","  a=np.reshape(x_batch_train[1][0],(img_size,img_size))\n","  plt.imshow(a)\n","  print(tf.shape(x_batch_train[1][0]))"]},{"cell_type":"markdown","metadata":{"id":"GJFtbCjt_Uny"},"source":["# 建立模型"]},{"cell_type":"markdown","metadata":{"id":"nbrDPIuU8kS-"},"source":["## 100*100 尝试"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9Z1GdFl3-zlP"},"outputs":[],"source":["class Sampling(tf.keras.layers.Layer):\n","  def call(self, inputs):\n","    \"\"\"Generates a random sample and combines with the encoder output\n","    \n","    Args:\n","      inputs -- output tensor from the encoder\n","\n","    Returns:\n","      `inputs` tensors combined with a random sample\n","    \"\"\"\n","    ### START CODE HERE ###\n","    mu, sigma = inputs\n","    batch = tf.shape(mu)[0]\n","    dim = tf.shape(mu)[1]\n","    epsilon = tf.keras.backend.random_normal(shape=(batch, dim))\n","    z = mu + tf.exp(0.5 * sigma) * epsilon\n","    ### END CODE HERE ###\n","    return  z\n","def kl_reconstruction_loss(inputs, outputs, mu, sigma):\n","  \"\"\" Computes the Kullback-Leibler Divergence (KLD)\n","  Args:\n","    inputs -- batch from the dataset\n","    outputs -- output of the Sampling layer\n","    mu -- mean\n","    sigma -- standard deviation\n","\n","  Returns:\n","    KLD loss\n","  \"\"\"\n","  kl_loss = 1 + sigma - tf.square(mu) - tf.math.exp(sigma)\n","  return tf.reduce_mean(kl_loss) * -0.5"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"tQ3Wx2UrsTlA"},"outputs":[],"source":["def encoder_layers(latent_dim,input_img,input_signal):\n","  input_img=tf.keras.layers.GaussianNoise(0.1)(input_img)\n","  '''Defines the encoder with two Conv2D and max pooling layers.'''\n","  conv_1 = tf.keras.layers.Conv2D(filters=64, kernel_size=(5,5), activation='relu', padding='same',strides=2)(input_img)\n","  max_pool_1 = tf.keras.layers.MaxPooling2D(pool_size=(2,2))(conv_1)\n","\n","  conv_2 = tf.keras.layers.Conv2D(filters=128, kernel_size=(5,5), activation='relu', padding='same',strides=2)(max_pool_1)\n","  max_pool_2 = tf.keras.layers.MaxPooling2D(pool_size=(2,2))(conv_2)\n","\n","  conv_3 = tf.keras.layers.Conv2D(filters=64, kernel_size=(4,4), activation='relu', padding='same',strides=2)(max_pool_2)\n","  max_pool_3 = tf.keras.layers.MaxPooling2D(pool_size=(2,2))(conv_3)\n","\n","  x = tf.keras.layers.Flatten(name=\"encode_flatten\")(max_pool_3)\n","  input_siganl=tf.keras.layers.Flatten()(input_signal)\n","  input_dense = tf.keras.layers.Dense(100, name='signal_dense1')(input_siganl)\n","  x=tf.concat([x,input_dense],1)\n","  x = tf.keras.layers.Dense(1000, activation='relu', name=\"encode_dense\")(x)\n","  x = tf.keras.layers.BatchNormalization()(x)\n","  mu = tf.keras.layers.Dense(latent_dim, name='latent_mu')(x)\n","  mu = tf.keras.layers.BatchNormalization()(mu)\n","  sigma = tf.keras.layers.Dense(latent_dim, name ='latent_sigma')(x)\n","  sigma = tf.keras.layers.BatchNormalization()(sigma)\n","\n","  return mu, sigma, x.shape"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Csfoc4LMsYQD"},"outputs":[],"source":["def decoder_layers(input1,input2):\n","  '''Defines the decoder path to upsample back to the original image size.'''\n","  #units = conv_shape[1] * conv_shape[2] * conv_shape[3]\n","  x1 = tf.keras.layers.Dense(4000, activation = 'relu', name=\"decode_dense1\")(input1)\n","  x1 = tf.keras.layers.BatchNormalization()(x1)\n","  input2=tf.keras.layers.GaussianNoise(0.1)(input2)\n","  x2 = tf.keras.layers.Dense(1000, name='signal_dense2')(input2)\n","  x=tf.concat([x1,x2],1)\n","  x = tf.keras.layers.Dense(2000, name='signal_dense3')(x)\n","  x = tf.keras.layers.BatchNormalization()(x)\n","  x = tf.keras.layers.Reshape([10,10,20], name=\"decode_reshape\")(x)\n","  x = tf.keras.layers.Conv2DTranspose(filters=128, kernel_size=3, strides=2, padding='same', activation='relu', name=\"decode_conv2d_1\")(x)\n","  x = tf.keras.layers.BatchNormalization()(x)\n","  \n","  x = tf.keras.layers.Conv2DTranspose(filters=64, kernel_size=3, strides=2, padding='same', activation='relu', name=\"decode_conv2d_12\")(x)\n","  x = tf.keras.layers.BatchNormalization()(x)\n","  \n","  x = tf.keras.layers.Conv2DTranspose(filters=32, kernel_size=3, strides=2, padding='same', activation='relu', name=\"decode_conv2d_2\")(x)\n","  x = tf.keras.layers.BatchNormalization()(x)\n","\n","  x = tf.keras.layers.Conv2DTranspose(filters=8, kernel_size=3, strides=1, padding='same', activation='relu', name=\"decode_conv2d_3\")(x)\n","  x = tf.keras.layers.BatchNormalization()(x)\n","\n","  x = tf.keras.layers.Conv2DTranspose(filters=1, kernel_size=3, strides=1, padding='same', activation='sigmoid', name=\"decode_final\")(x)\n","\n","\n","  return x"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"UL2AsSsMsdLA"},"outputs":[],"source":["def vae_models():\n","  latent_dim=512\n","  inputs1 = tf.keras.layers.Input(shape=(80, 80, 1,))\n","  inputs2= tf.keras.layers.Input(shape=(3))\n","  mu, sigma, x_shape=encoder_layers(latent_dim,inputs1,inputs2)\n","  z = Sampling()((mu, sigma))\n","  decoder_output=decoder_layers(z,inputs2)\n","  model = tf.keras.Model(inputs =[inputs1,inputs2], outputs=decoder_output)\n","  loss = kl_reconstruction_loss(inputs1, z, mu, sigma)\n","  model.add_loss(loss)\n","  return model\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1406,"status":"ok","timestamp":1660399826836,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"hTL2mDh3sjXK","outputId":"1e6b7433-3c15-45ae-b791-f644b82da7de"},"outputs":[{"name":"stdout","output_type":"stream","text":["Model: \"model\"\n","__________________________________________________________________________________________________\n"," Layer (type)                   Output Shape         Param #     Connected to                     \n","==================================================================================================\n"," input_1 (InputLayer)           [(None, 80, 80, 1)]  0           []                               \n","                                                                                                  \n"," gaussian_noise (GaussianNoise)  (None, 80, 80, 1)   0           ['input_1[0][0]']                \n","                                                                                                  \n"," conv2d (Conv2D)                (None, 40, 40, 64)   1664        ['gaussian_noise[0][0]']         \n","                                                                                                  \n"," max_pooling2d (MaxPooling2D)   (None, 20, 20, 64)   0           ['conv2d[0][0]']                 \n","                                                                                                  \n"," conv2d_1 (Conv2D)              (None, 10, 10, 128)  204928      ['max_pooling2d[0][0]']          \n","                                                                                                  \n"," max_pooling2d_1 (MaxPooling2D)  (None, 5, 5, 128)   0           ['conv2d_1[0][0]']               \n","                                                                                                  \n"," conv2d_2 (Conv2D)              (None, 3, 3, 64)     131136      ['max_pooling2d_1[0][0]']        \n","                                                                                                  \n"," input_2 (InputLayer)           [(None, 3)]          0           []                               \n","                                                                                                  \n"," max_pooling2d_2 (MaxPooling2D)  (None, 1, 1, 64)    0           ['conv2d_2[0][0]']               \n","                                                                                                  \n"," flatten (Flatten)              (None, 3)            0           ['input_2[0][0]']                \n","                                                                                                  \n"," encode_flatten (Flatten)       (None, 64)           0           ['max_pooling2d_2[0][0]']        \n","                                                                                                  \n"," signal_dense1 (Dense)          (None, 100)          400         ['flatten[0][0]']                \n","                                                                                                  \n"," tf.concat (TFOpLambda)         (None, 164)          0           ['encode_flatten[0][0]',         \n","                                                                  'signal_dense1[0][0]']          \n","                                                                                                  \n"," encode_dense (Dense)           (None, 1000)         165000      ['tf.concat[0][0]']              \n","                                                                                                  \n"," batch_normalization (BatchNorm  (None, 1000)        4000        ['encode_dense[0][0]']           \n"," alization)                                                                                       \n","                                                                                                  \n"," latent_mu (Dense)              (None, 512)          512512      ['batch_normalization[0][0]']    \n","                                                                                                  \n"," latent_sigma (Dense)           (None, 512)          512512      ['batch_normalization[0][0]']    \n","                                                                                                  \n"," batch_normalization_1 (BatchNo  (None, 512)         2048        ['latent_mu[0][0]']              \n"," rmalization)                                                                                     \n","                                                                                                  \n"," batch_normalization_2 (BatchNo  (None, 512)         2048        ['latent_sigma[0][0]']           \n"," rmalization)                                                                                     \n","                                                                                                  \n"," sampling (Sampling)            (None, 512)          0           ['batch_normalization_1[0][0]',  \n","                                                                  'batch_normalization_2[0][0]']  \n","                                                                                                  \n"," decode_dense1 (Dense)          (None, 4000)         2052000     ['sampling[0][0]']               \n","                                                                                                  \n"," gaussian_noise_1 (GaussianNois  (None, 3)           0           ['input_2[0][0]']                \n"," e)                                                                                               \n","                                                                                                  \n"," batch_normalization_3 (BatchNo  (None, 4000)        16000       ['decode_dense1[0][0]']          \n"," rmalization)                                                                                     \n","                                                                                                  \n"," signal_dense2 (Dense)          (None, 1000)         4000        ['gaussian_noise_1[0][0]']       \n","                                                                                                  \n"," tf.concat_1 (TFOpLambda)       (None, 5000)         0           ['batch_normalization_3[0][0]',  \n","                                                                  'signal_dense2[0][0]']          \n","                                                                                                  \n"," signal_dense3 (Dense)          (None, 2000)         10002000    ['tf.concat_1[0][0]']            \n","                                                                                                  \n"," batch_normalization_4 (BatchNo  (None, 2000)        8000        ['signal_dense3[0][0]']          \n"," rmalization)                                                                                     \n","                                                                                                  \n"," decode_reshape (Reshape)       (None, 10, 10, 20)   0           ['batch_normalization_4[0][0]']  \n","                                                                                                  \n"," decode_conv2d_1 (Conv2DTranspo  (None, 20, 20, 128)  23168      ['decode_reshape[0][0]']         \n"," se)                                                                                              \n","                                                                                                  \n"," batch_normalization_5 (BatchNo  (None, 20, 20, 128)  512        ['decode_conv2d_1[0][0]']        \n"," rmalization)                                                                                     \n","                                                                                                  \n"," decode_conv2d_12 (Conv2DTransp  (None, 40, 40, 64)  73792       ['batch_normalization_5[0][0]']  \n"," ose)                                                                                             \n","                                                                                                  \n"," batch_normalization_6 (BatchNo  (None, 40, 40, 64)  256         ['decode_conv2d_12[0][0]']       \n"," rmalization)                                                                                     \n","                                                                                                  \n"," decode_conv2d_2 (Conv2DTranspo  (None, 80, 80, 32)  18464       ['batch_normalization_6[0][0]']  \n"," se)                                                                                              \n","                                                                                                  \n"," batch_normalization_7 (BatchNo  (None, 80, 80, 32)  128         ['decode_conv2d_2[0][0]']        \n"," rmalization)                                                                                     \n","                                                                                                  \n"," decode_conv2d_3 (Conv2DTranspo  (None, 80, 80, 8)   2312        ['batch_normalization_7[0][0]']  \n"," se)                                                                                              \n","                                                                                                  \n"," batch_normalization_8 (BatchNo  (None, 80, 80, 8)   32          ['decode_conv2d_3[0][0]']        \n"," rmalization)                                                                                     \n","                                                                                                  \n"," decode_final (Conv2DTranspose)  (None, 80, 80, 1)   73          ['batch_normalization_8[0][0]']  \n","                                                                                                  \n"," tf.__operators__.add (TFOpLamb  (None, 512)         0           ['batch_normalization_2[0][0]']  \n"," da)                                                                                              \n","                                                                                                  \n"," tf.math.square (TFOpLambda)    (None, 512)          0           ['batch_normalization_1[0][0]']  \n","                                                                                                  \n"," tf.math.subtract (TFOpLambda)  (None, 512)          0           ['tf.__operators__.add[0][0]',   \n","                                                                  'tf.math.square[0][0]']         \n","                                                                                                  \n"," tf.math.exp (TFOpLambda)       (None, 512)          0           ['batch_normalization_2[0][0]']  \n","                                                                                                  \n"," tf.math.subtract_1 (TFOpLambda  (None, 512)         0           ['tf.math.subtract[0][0]',       \n"," )                                                                'tf.math.exp[0][0]']            \n","                                                                                                  \n"," tf.math.reduce_mean (TFOpLambd  ()                  0           ['tf.math.subtract_1[0][0]']     \n"," a)                                                                                               \n","                                                                                                  \n"," tf.math.multiply (TFOpLambda)  ()                   0           ['tf.math.reduce_mean[0][0]']    \n","                                                                                                  \n"," add_loss (AddLoss)             ()                   0           ['tf.math.multiply[0][0]']       \n","                                                                                                  \n","==================================================================================================\n","Total params: 13,736,985\n","Trainable params: 13,720,473\n","Non-trainable params: 16,512\n","__________________________________________________________________________________________________\n"]}],"source":["vae_auto_models = vae_models()\n","vae_auto_models.summary()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"eBMnkSb4sjbD"},"outputs":[],"source":["optimizer = tf.keras.optimizers.Adam(learning_rate=0.0001)\n","loss_metric = tf.keras.metrics.Mean()\n","mse_loss = tf.keras.losses.MeanSquaredError()\n","bce_loss = tf.keras.losses.BinaryCrossentropy()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":401},"executionInfo":{"elapsed":402,"status":"error","timestamp":1660399827232,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"E-EO_j_esu7q","outputId":"94d105f3-845a-44ef-ab54-27431e74d065"},"outputs":[{"name":"stdout","output_type":"stream","text":["Start of epoch 0\n"]},{"ename":"ValueError","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-34-6e3b2aa8603c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     15\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mGradientTape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mtape\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m       \u001b[0;31m### START CODE HERE ###\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 17\u001b[0;31m       \u001b[0mreconstructed\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvae_auto_models\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_batch_train\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     18\u001b[0m       \u001b[0;31m# Compute reconstruction loss\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m       \u001b[0mflattened_inputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_batch_train\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mshape\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     65\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pylint: disable=broad-except\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 67\u001b[0;31m       \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwith_traceback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfiltered_tb\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     68\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     69\u001b[0m       \u001b[0;32mdel\u001b[0m \u001b[0mfiltered_tb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/engine/input_spec.py\u001b[0m in \u001b[0;36massert_input_compatibility\u001b[0;34m(input_spec, inputs, layer_name)\u001b[0m\n\u001b[1;32m    262\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mspec_dim\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mdim\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    263\u001b[0m           \u001b[0;32mif\u001b[0m \u001b[0mspec_dim\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mdim\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 264\u001b[0;31m             raise ValueError(f'Input {input_index} of layer \"{layer_name}\" is '\n\u001b[0m\u001b[1;32m    265\u001b[0m                              \u001b[0;34m'incompatible with the layer: '\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    266\u001b[0m                              \u001b[0;34mf'expected shape={spec.shape}, '\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Input 0 of layer \"model\" is incompatible with the layer: expected shape=(None, 80, 80, 1), found shape=(30, 300, 300, 1)"]}],"source":["# Training loop. Display generated images each epoch\n","\n","### START CODE HERE ###\n","epochs =200\n","### END CODE HERE ###\n","\n","#random_vector_for_generation = tf.random.normal(shape=[16, LATENT_DIM])\n","#generate_and_save_images(decoder, 0, 0, random_vector_for_generation)\n","\n","for epoch in range(epochs):\n","  print('Start of epoch %d' % (epoch,))\n","\n","  # Iterate over the batches of the dataset.\n","  for step, x_batch_train in enumerate(training_dataset):\n","    with tf.GradientTape() as tape:\n","      ### START CODE HERE ### \n","      reconstructed = vae_auto_models(x_batch_train[0])\n","      # Compute reconstruction loss\n","      flattened_inputs = tf.reshape(x_batch_train[1], shape=[-1])\n","      flattened_outputs = tf.reshape(reconstructed, shape=[-1])\n","      loss = bce_loss(flattened_inputs, flattened_outputs) * 300 * 300 * 1\n","      loss += sum(vae_auto_models.losses) \n","\n","    grads =tape.gradient(loss, vae_auto_models.trainable_weights)\n","    optimizer.apply_gradients(zip(grads, vae_auto_models.trainable_weights))\n","    ### END CODE HERE\n","    \n","    loss_metric(loss)\n","\n","    if step % 10 == 0:\n","      display.clear_output(wait=False)    \n","      generate_and_save_images(vae_auto_models, epoch, step, x_batch_train[0],img_size)\n","    print('Epoch: %s step: %s mean loss = %s' % (epoch, step, loss_metric.result().numpy()))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"HpYHgCD3s5eN"},"outputs":[],"source":[" def generate_and_save_images(model, epoch, step, test_input):\n","  \"\"\"Helper function to plot our 16 images\n","\n","  Args:\n","\n","  model -- the decoder model\n","  epoch -- current epoch number during training\n","  step -- current step number during training\n","  test_input -- random tensor with shape (16, LATENT_DIM)\n","  \"\"\"\n","  predictions = model.predict(test_input)\n","  predictions=np.array(predictions)\n","\n","  fig = plt.figure(figsize=(6,6))\n","\n","  for i in range(predictions.shape[0]):\n","      plt.subplot(6, 6, i+1)\n","      img = predictions[i, :, :] * 255\n","      img=np.reshape(img,[300,300])\n","      img = img.astype('int32')\n","      plt.imshow(img)\n","      plt.axis('off')\n","\n","  # tight_layout minimizes the overlap between 2 sub-plots\n","  fig.suptitle(\"epoch: {}, step: {}\".format(epoch, step))\n","  plt.savefig('image_at_epoch_{:04d}_step{:04d}.png'.format(epoch, step))\n","  plt.show()"]},{"cell_type":"markdown","metadata":{"id":"azCTeVfALgy1"},"source":["# show performance"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ZmhY8YVFQRuG"},"outputs":[],"source":["def display_one_row(disp_images, offset, shape=(img_size, img_size)):\n","  '''Display sample outputs in one row.'''\n","  for idx, test_image in enumerate(disp_images):\n","    plt.subplot(3, 10, offset + idx + 1)\n","    plt.xticks([])\n","    plt.yticks([])\n","    test_image = np.reshape(test_image, shape)\n","    plt.imshow(test_image, cmap='gray')\n","\n","\n","def display_results(disp_input_images, disp_predicted,disp_expect, enc_shape=(8,4)):\n","  '''Displays the input, encoded, and decoded output values.'''\n","  plt.figure(figsize=(15, 5))\n","  display_one_row(disp_input_images, 0, shape=(img_size,img_size,))\n","  #display_one_row(disp_encoded, 10, shape=enc_shape)\n","  display_one_row(disp_expect, 10, shape=(img_size,img_size,))\n","  display_one_row(disp_predicted, 20, shape=(img_size,img_size,))\n","  "]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":297},"executionInfo":{"elapsed":1683,"status":"ok","timestamp":1661843458577,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"4Xnuq-BBRqd9","outputId":"66362d5f-6a17-4b86-f714-e394aa38bb14"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 1080x360 with 30 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["# take 1 batch of the dataset\n","#test_dataset = test_dataset.take(1)\n","\n","# take the input images and put them in a list\n","# output_samples = []\n","# for input_image in tfds.as_numpy(X_test):\n","#       output_samples = input_image\n","output_samples=X_test\n","# pick 10 indices\n","i=2\n","idxs = np.array([1+i, 2+i, 3+i, 4+i, 5+i, 6+i, 7+i, 8+i, 9+i, 10+i])\n","\n","# prepare test samples as a batch of 10 images\n","conv_output_samples = np.array(output_samples[idxs])\n","conv_output_samples = np.reshape(conv_output_samples, (10,img_size,img_size, 1))\n","test_input_samples=np.array(X_test_initial[idxs])\n","test_input_samples_img = np.reshape(test_input_samples, (10,img_size,img_size, 1))\n","test_input_sample_signal=np.array(y_test[idxs])\n","# get the encoder ouput\n","#encoded = convolutional_encoder_model.predict([test_input_samples_img,test_input_sample_signal])\n","\n","# get a prediction for some values in the dataset\n","predicted = vae_auto_models.predict([test_input_samples_img,test_input_sample_signal])\n","\n","# display the samples, encodings and decoded values!\n","display_results(test_input_samples,predicted,conv_output_samples, enc_shape=(7,7))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":297},"executionInfo":{"elapsed":2113,"status":"ok","timestamp":1661843471294,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"Vev_C3YPfYen","outputId":"0250cbd7-615c-49b3-a8a2-d72b952ec12f"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 1080x360 with 30 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["# take 1 batch of the dataset\n","#test_dataset = test_dataset.take(1)\n","\n","# take the input images and put them in a list\n","# output_samples = []\n","# for input_image in tfds.as_numpy(X_test):\n","#       output_samples = input_image\n","output_samples=X_train\n","# pick 10 indices\n","i=10\n","\n","idxs = np.array([1+i, 2+i, 3+i, 4+i, 5+i, 6+i, 7+i, 8+i, 9+i, 10+i])\n","\n","# prepare test samples as a batch of 10 images\n","conv_output_samples = np.array(output_samples[idxs])\n","conv_output_samples = np.reshape(conv_output_samples, (10,img_size,img_size, 1))\n","train_input_samples=np.array(X_train_initial[idxs])\n","train_input_samples_img = np.reshape(train_input_samples, (10,img_size,img_size, 1))\n","train_input_sample_signal=np.array(y_train[idxs])\n","# get the encoder ouput\n","#encoded = convolutional_encoder_model.predict([test_input_samples_img,test_input_sample_signal])\n","\n","# get a prediction for some values in the dataset\n","predicted = vae_auto_models.predict([train_input_samples_img,train_input_sample_signal])\n","\n","# display the samples, encodings and decoded values!\n","display_results(train_input_samples,predicted,conv_output_samples, enc_shape=(7,7))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":286},"executionInfo":{"elapsed":684,"status":"ok","timestamp":1660269870738,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"z3kIaspVGBMU","outputId":"4ae01fb8-0806-42f4-9c33-512a496ee5e6"},"outputs":[{"data":{"text/plain":["<matplotlib.image.AxesImage at 0x7fcfb22a0f10>"]},"execution_count":98,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAQEAAAD8CAYAAAB3lxGOAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nO2de5gcVbW331U1PTOZSWASEkJu5AIJiDeM4SogggjmwxP4VC4eEVEIIiAcAwj6KajgUYIoXkCDhgOoXAS5yAE0cBCQk4QkgEDuQxIMITcIJpMZZqa7an1/VFV3dWcmM5m+Znq9zzNPV++urlpTM/u3915777VEVTEMo3pxym2AYRjlxUTAMKocEwHDqHJMBAyjyjERMIwqx0TAMKqcoomAiJwkIstFpFlErizWfQzDyA8pxjoBEXGBFcAJwBvAAuBMVV1S8JsZhpEXxeoJHAo0q+oqVe0E7gamFelehmHkQU2RrjsKWBt7/wZwWHcn10qd1tNYJFMMwwBo4Z23VHVYbnmxRKBHRGQ6MB2gngYOk+PLZYphVAVP6H2vd1VerOHAOmBM7P3osCyNqs5S1SmqOiVBXZHMMAyjJ4olAguAiSIyXkRqgTOAh4t0L8Mw8qAowwFVTYnIRcBfABeYraqLi3EvwzDyo2g+AVV9FHi0WNc3DKMw2IpBw6hyTAQMo8oxETCMKsdEwDCqHBMBw6hyTAQMo8oxETCMKsdEwDCqHBMBw6hyTAQMo8oxETCMKsdEwDCqHBMBw6hyTAQMo8oxETCMKsdEwDCqHBMBw6hyTAQMo8oxETCMKsdEwDCqHBMBw6hyTAQMo8oxETCMKsdEwDCqHBMBw6hyTAQMo8oxETCMKievXIQisgZoATwgpapTRGQIcA8wDlgDnKaq7+RnpmEYxaIQPYGPqerBqjolfH8l8KSqTgSeDN8bhlGhFGM4MA24PTy+HTilCPcwDKNA5CsCCvxVRBaJyPSwbLiqrg+PNwDD87yHYRhFJC+fAHCUqq4Tkb2BOSKyLP6hqqqIaFdfDEVjOkA9DXmaYRhGX8mrJ6Cq68LXTcADwKHARhEZARC+burmu7NUdYqqTklQl48ZhmHkQZ9FQEQaRWRQdAx8AngVeBg4OzztbOChfI00DKN45DMcGA48ICLRdf6gqo+LyALgXhH5MvA6cFr+ZhqGUSz6LAKqugr4YBflbwPH52OUYRilw1YMGkaVYyJgGFWOiYBhVDkmAoZR5eS7WMgoByKgmnkNqRk1khUXj0UUJlzzAtrR0f13glmdzPdzrmVUDyYCuxtR5Y1eY+XencIz+8+kTeGHx51ISmsBeHr+eznw2teC85zs7/lvb0F9Bd/Lvq4qUlODplLF+k2MCsFEYHcj3nKLA/jpjz47YhEe0CBw9Yi/0KEwyBFaT3kM/xTwEBIo7epQLz7t6vCZX1/GiHntuH97MbweiOuiyc5AAHJ7DEa/w3wCuyNRxfS9dMVFlYSkcIE2BRdICLT6SqMj1Ak0iOIK7OUq9QKDHJ9HvnI9676aDCq574H6aCoJjhveyzEB6OdYT2B3JKyUUlODeh7unnugo0fgylo8oE7ADcf4joCnik+g+A7Bew9IKtQL+H4oKlHF9z3QcHigPkb/xkRgd0UETaVwGhtZ/vMJPP3Rn6c/8oHOsOJH7xNAMnyNSEhQJhI6CkO/wLbPHc720VEPA5qaPRoemF/0X8koDyYCpaYrz74IUpMIWt2we6/Jzh2/k3upmhqW/ew9PP3Rn6bL3NjnCYK4b4SvTux9JAxueHmpycjDnueu5Y/735M+79HtBzD73CPxfMGbM5R9blmYbYj6qOcFvoTIkdjNDEaXz8IoK6IV8EfYQ4boYdKPtxuknXiE4/hMBdEjPsA/T2xk1lk342twTqe6XHvZOQxc/BZe8+rsiuK44Hu4w4ax7IYxPHnsz2h0hHbVPjt4WnyHjd5APIJhwZiabTSEYSBcgqFFpyq1Imz2HDZ4A6mXJEkN2pCEpDjn7gsZ++i7OH9/qednER3GRcMoOk/ofYtiYQDTmAgUg7Cipiu/+tlz8+Lg7j+OFdOH8Z2T7+O4hjVAphWPWuuvrPosK58dx7jvzMuICEHlWfGb9/Hcx36WPndXccP7RK90cZwE6kVo9ZWEZH9eK4Hw1IvQ4it1AvPbR/KTq86k8f752VOY8d89jjiZqUmj6JgIlJjIaQcgtbU4TXuCr4jrQE0NYx94myuHP5HusrtAuwbj9DhtKvzn+pOoEZ93vQR1Tooax+PSvZ9kL1fTLXTk7OstPtAgQltYkaMKDaSPO8P/jcipmPv9RGhz1BNJAP/z7lhuO38a7t9e2PnCpEgAbEhQMroTAfMJFImomyt1day4/kPMOeUGIJirdwla1shZF43VIwGIV7oGUb4/8rEdrl8fq8CtfjD1tyvDAQdIhhU3aukjZ2K8dY/eR58lCIYHkei44fei3+HoAa9zzUl1NI0/AvFh6MPL8N55J6z4EgwBPC8QgKjHZJQVE4Ei4zTtyZxTbqAu3cJrulsdCcAO3+nFddvCCtyuukPvobdE1a9eyOpFdGogAFGXP2rlo+94MUFIKtQ7GZFwgGc+NzN9vZOmnU/btgkA1LxZy/hvzcu0/CYAFYGJQDGIdYP9fYcTreuLKnf0r5/PSq2o5S3Eaq94VYxfrzPmbMytrvHeSzRs6Orcx6f8On281Xd59pT9ue2H/8aQF4J8NLpydbDHoZtZExsqFB8TgWIRjoNH/Xw1rmRP11UrQxyPaQOXM+3amUDwPI6953Lq3xIQqN+s7DV7XpYDFfyMc9UciUXBRKAYhC3apguOYMbQW7Pm56uZ+GzDICdo5f92+sy03+FHm45m8e3xaUM/40NQzaxiNAqK7R0oEm5TE9uOfJcDay0NY0QkAPUCLb6SDMsdAt/G+UOf5bVrDwkchpETMZUKBCC9l6GPDhCjW0wEioDU1LD0x/vx9DE/p0EEn/hev+rFizkxoyGSS2YGol4Ub4CmN0apH/MH2DCgaJgIFBinvp7lN3+Ipz8eLOWNpvHsQZNu+SHzjxfNkERrE35w0j1MXFDHvnPr2XduPRz+Adw99sh80RyFBcd8AoUi9GS/cdFknj7p+vQ/uUPGe17t5M4exGc3oud01IC1HDVgLRBMUbbeo0xvPpN//e69DL3rRfwoWlJ6C7WfPatgMwq7jIlAIQj/8WpGjeS9py6zVr9AdGrgP7hj4l0kvwsnnPRVmh5ppOl383bc4hzOJNh+hF3HRCBfYi3P3ve3dLm6z+gbPqSXRCeAOUfczNpDGnjpqrH8esVRjLoaWL4aVUU7OjJLtR03IxLWK+gRE4F8iXVB//bie8BEoGDkDqUSwNiaNiYMXMq0yUupfUQ48u7LGPmcx4CHFqT3apgTcdewnmsBOfCKpRw959Jym9Gv8MnsrnRzpge9cJ3B2f/5MNsfG8+KWw5BamvT+xTS04rGTjERKATREuGWFvb+W4LL1v4bHfHZrfJZtlvjQtYuy2jHZBRDMeKExmZ+9547eHbqjXx76VxSx00OPrDQaL2iRxEQkdkisklEXo2VDRGROSKyMnwdHJaLiPxMRJpF5GURmVxM4yuKsNvadOdc3jl6KyfPvoLpr52GtUV9xyN7JgEym5vinzmEsRIJhgvqxpYdx3sD1jPokt70BP4LOCmn7ErgSVWdCDwZvgf4JDAx/JkO3FIYM3czfI99v/u/rHp2LP/ynfQ+faN4RNONtSKoEC4z9mPBXSTcf2B/i1x6FAFVfQbYklM8Dbg9PL4dOCVWfocGzAOaRGREoYzd3Rh7zfP8n0f+g1bfPNTFJvIdtPqKKDsENBHXDYXB/ha59HV2YLiqrg+PNwDDw+NRwNrYeW+EZevJQUSmE/QWqKehj2ZUKNE/oPoc+N1V+J/KDs1lFJ741uaOr2/h9bMOJgyZyB5zB7D3zXPLaV5Fk/cUoaqqiOyyvKrqLGAWBOHF8rWjoog2vKiPv20bp113OdddMZv31b5dbsv6LZEL0AHuOeiOrBmFVUfWc37NxYx6fBPe8uYyWVi59FUENorICFVdH3b3N4Xl64AxsfNGh2XVRRTD33HRjg6GzprLV4/8PM8dd1NWTD6HbC93vKeQG9evp55E9HkUDai30z5veQlO/etFwRuNHGpK0z4t/PlDv9nBnug1ul/u+3KRG68hHbZNlQmJdh6fcT1/Ov893H/piST+mhMyPXepcZUtPe6rCDwMnA38MHx9KFZ+kYjcDRwGbI0NG6qH3PBZIkz8VZK/HD6BqY2r8WKVNJnz1SieXxR/sNV38BEclH//0Qzq31Ho6v9TYPtIh0cvvT5dIboKEBrREl735Y5RTPrKwh2i+dSMGsnUX57HXQfPJiE+SXWoF49BYSix3OhI8VBp5RCEriIfRUSi+NlBy3jnhkaenX4osmhZVm6HdPLVeMLXKhGCHqMNi8hdwLHAUGAjcDXwIHAvsC/wOnCaqm4REQF+QTCb0Aaco6oLu7punH4bbTjrn8rBef8kjr7zBT7ftCh9XjRzEI8W7AJLknvyy3XHsf2qUdQsXg3i4Le07HRdvBzyfmbdf0tWD+P7Gz/OhncHZZ3XlqrF/VwKbW8HX/FaWrKGMJFDzRkwAKmrA88D16Vj8gRuv+2mrN5Le5j0tC2PvAelIBLEWhHeTNXwjVWfpv0nI2l8Zhne9tbsNQX9NLyZhRwvNV3lHFDF+9hkPvLT+Zw3eH46tj9kurO1IrztCWf89DL2uWlul4lHuqNmxD40Xzg+vD8ccNRq2r+5D/JcDwlBuiI3d4LvUTN2DM3TRwc9EYX3H7uSn499kHYlHe04+p0qSRCS4RAMyBoqucBR913G/jPmZ+9KhH65I9FEoMSkewI5rSvA9sfGc9dBdwDZuQHbFD7xzMWM/61Q8/eX+7YbLjY1VjN+LP7Gzfitrb06P3jfTT6AeK6A8L273ziSo5rSzezWcfXccs1NjHQ7K2YmJNqA1KbEIj5nhixtKvx00/EkfZd1XxgBGzfjbd2WfZEKqCOFwPIOlJj0braoQkG6Enm+wyudQ7niH59GQ2ecqtC+pT49Ptf0ApddbJGijMWuS2r16zv/Xvy66Vcv8z6epRgyrWT4e3nNq3GaM9ca/KzDv+93CU98cWbvbC0BUcvfIJlEKfGkKvWiXLPPk0HI9Dnw8d9fzvhvPQ8ai2/YzzERKBbxwJg5jkL3tr345VePY/RnlnRfSfNsfXrVi+jpHrlDj57yBfge+z7Wxsmbr0gXXXrhfZzYsCqrZxCfwYgPH3bmyOwr8VmDKFEKYVnkfI2HTFeXtHBXgwCAiUBZGPTgiyw7+X1MqnkLTSV7royV0B3tpY0y9x8Mn5dJO/aHRZ9k9S0LqZMUp++5KJ2noKtZBchkP+prQpVcuopiRDdlG71a6t+SdFwCqUkEf59+jvkESkms+532GfRXcpOIiMOFy5cyuW5TuvVPxF6BHRyMpW6Hv7luKhs/0po9hKuA+lEozCdQCcSm4XZwGvY34lOOgDjCzG+chR+6Gd76gMMfz/oJTU4qXfmjRVTdJWctNlFq+LQvx3GrIteBiUApiVYSRvTTCDjpXk5sVkRTKRoeeD7tHB30YC1X/nQqb/x2OE98+Dd0qqaHCW45p+Zisx/VEo+gkqZz+z/xqbh+vLc9PcxJDwdi/2ZhJdNkJ97bWxh9zgaOmX05P9l8TPqUKMBoqXHEz45I1B97aF1gIlBqqjEjr58zSxLDe+cdxl4zl6Wf349Tr76cN706fDLRhKLELSWLyRDFIQiHM+7ECbw28wic+vrS3L8MmAgY5UcVb+lK9rpzARdf/TWmvXguyVAvgqhBwtZSx2QIhwNaV8uzp89k+fUfRBK12Z/3E0wEjMognJdvunMew09bzfEPz8gKKTbIkaLHavTVycmIDMuvaCAJzJn2Y5p/8OF+VfkjbIrQKD+503GOizOgHmf4MNzb2rl5/H0lmTJs8R1e6Ah2wifVJSEeR9a/nl5l2OI7/KNjFDd993T2uGv+buczsL0DRuUSTxYCWZXLHTaMd//QwD0H/qFk6dx8YJA4/Mv309OWkFm/8KZXy4Xf/hp7/m5eSewpFN2JgA0HjPLje5n4fzmblrzNmxlwgcOpM2bwaudeJQnfngBa1U+vbkyQvYBppNvJ179zF1v//fASWFN8rCdg7DboER+k5gebmbHvXzggsbXc5rDVdzn7uq8zdOE29MXFFb/4y3oCxu5HfC2FCM6CxXjHrWfGTefToZmpw3It6RnkeDz47ZmM/fUq5JD3h3buflVq97PYqB7iW5dVg119qoz8/TI8JD11mBursVREkYq+tc8ctk5sDIY1u+H6DxMBo3IRZ8fluyKQTHFx8+m0h1OHUJ4gpz4Zn0Hatt0QEwGjclEfqUnENiOFsQC2t+Je3MB5K8/AUy3bcCAaiux+bX82toHIqGjS+/njS4/Vw1uyAve0IZw78EwQYeuvarg7zDdQqkrZrooX7nbcPtph8EGT8BYvL9HdC4f1BIzKpYe0Yd7bW0i9vpbUmn/S+sg+HPPwDGas/RQu2T4CP+d9ofwHCQIB8IDHLrqeT9w7n7XfPpKaMaPBcZGamt1iiGBThEa/wn3vAbznjpVcMuwZ6sMgo64IrX7gPyhk1KJodiJaxBSJy3mrPov3qe3427dnB2ctMzZFaPRrolbXW7KCpVOHcsOmj9GpSrtm9h60+IorhZ1JiHwStSIkCYKh/Hz8H0k92IS7//jsrMgViomA0S/QVCqdedjb/DYrv7QfV6z9VLrVbw9jFEQhzQpBPIhpqx/MEtRL8HPbxLtI/iqJO2xYaGD5e9zdYSJg9BvU89LRm/xXlrP1rD256a2j07MHHl0HHO0rHkFikwaRtG8g+oFACPx7anGbmgp0x+JgImD0H+KORFVSq9aw+KxJ6cVEuQ7DQpCQoJcRCU3khIze37b/PXT8cRCbv3JEdjyCCsJEwOjfrNvAsc9eDASxC3MjFsUrbD4C4cRe470ND7h90h+4/6qZvHbdh7P9AxXiJ+hRBERktohsEpFXY2XXiMg6EXkp/Jka++wqEWkWkeUicmKxDDeM3uBt3cakC17jyCcu5Xdbg/X9HoFXP/IPNIiQ1OKuL0gIPH76TJpvPAyZ8r6sxU/lpjdZiY8BtgN3qOr7wrJrgO2qekPOuQcBdwGHAiOBJ4BJqjuP22xThEZRCVtcd9J+NM1+m+vH/BmfwLEXTR8mpDS5Dnxgg1fH1759ccnjEfR5ilBVnwG29PI+04C7VbVDVVcDzQSCYBjlRRy8Fa/xr/OGccPmY4GgwsdDlxVbAFyCCnfuLy5hz+a2ipk6zMcncJGIvBwOFwaHZaOAtbFz3gjLdkBEpovIQhFZmKQjDzMMYydEOQzCff7e0pWsmDqE6zcen/YFtMc3ARWRJMF6gr0XtcP8V4LCChgS9FUEbgH2Aw4G1gM/3tULqOosVZ2iqlMS1PXRDMPogR2yLivexk289uXxXLn2U0BmGFCK7cidqoiXY1OZ6ZMIqOpGVfVU1QduJdPlXweMiZ06OiwzjIrCf3kZ8xYeQFIzi4eKPRyIehvqljHDUhf0SQREZETs7alANHPwMHCGiNSJyHhgIvB8fiYaRnGYeOl8jn/qknRwkGITiY14momaVAGZqHrcSiwidwHHAkNF5A3gauBYETkYUGANcD6Aqi4WkXuBJUAKuLCnmQHDKAth0tEDbmzFPw5awg1GxYxonABOWHg+Y5vXk85HXQGbi3oUAVU9s4vi3+7k/OuA6/IxyjCKTrixR5c0c+JvruDp82bSHiZELRZJILl0D1Ibluz+wwHD6C+or4yY18msdz5c9Mowp3V/9pnnZRLT9oMpQsPYfYkqn++RmLOIpy88Ip0MNVpK7AIdWrhZgz9v+iD1/70orPxOVm/Aqa8vm3/ARMCoXlSDyqeKO/cVWvz69PbgaElxnRRu1qDWTcXCpPlBDISwV7Dpj/vS8cnJZRECEwGjOgkjGfvt7UAwLDjvsXPTC3raNZN1qOCBTFUR10X9zHqBxtokQ76xJhOEpISYCBjVSReZgg74xqtMP/V8frTpaBqdYFNRItxoVAi+MeoxjnullfaTD8UZNwZ3wr7UTBhHzYRxDB2wnXo3hdu0ZxAcpYRYjEGjeonG5jmt72szD+N/TrsBh6AXUMiWMhlGJ45WKUbXjzY0nfjCeYy54B1S6zcU8K4BFmPQMHJR3bH7rcqkmato16CskBXEJVsAog1FEGxt9oBHJt9K5/4jurtEUTARMIxYRmSpqcHb/DZn/b/LeKFj7y5P76ufwOvmNR6VKAF8/Oa/dx18pEi+AhMBw4ihfrDjsOnOuVx77dk0J/cAwmjCmnEaFnLXYYJgY5FDMCPx0cZl/OvzYdrzuABE6wsKjImAYcTxM4t5Bt8xjyu+fz5JzUQrBnAlqKyFct/FQ54lgLE173LVd+4MhCBaT6CK1NUVZaWhiYBh5CKZXX7Dnn6TW7ccSX3YAkexB+LhxvPFJXsnY4sKR9Zv5M5rb6Bm7Oh0668dxYm7YSJgGLlEra04pNb8k4fvOYpWX9MBRN1wSFAoout64erEBtFQbIIeSbGnDE0EDKM7wrUE+97WzIWrTkuHLI8PDQpB5BgMwpcHMwUbvDpO/vUVeOvWo6lUURcQmQgYRndEqdA3bmLLuw3pkOXFIGrr6wWSqpy98EuM/sH/ZoYARVzPYyJgGL1ARLMWDxVSDKJZAZdgqBHdr1SYCBhGL3BEaYvFGyjkKN0lGAIkCXIaAnhe6aqmiYBh9IQIvkp6QxEUPh5he9jdb3SE11MDGPhkY4Hv0D0mAobRE6q0vFufNZVXqJ5AtITYCxObdqrycscYht5ausQkJgKG0QvGfH41U188l88t+QKrUgPTPYF8txpH16mXTG/g3gtOKmn4MRMBw+gFflsbe09bRuPU17lz80eAYEfgDuf14drx9GefefWL1K3sYgehSBBwxJYNG0YZEQHfY8k7w0NnXiYKURSOrC8VKr5s+F8Lh5F6c31mA1E80lC0pLnAmAgYRm8JK2DTOW20hXUxns24PY94hNGqQRUyuxohs9W5SJuHwETAMHpP2Cr7W7dxwp9nBJVeMolLBjl9W0zkE1wjayiRU+GdQYNY873D+2R2T1hkIcPoBVJTEyzfDXHq63EGN3H6Uws5esCa0LGXGSLsKkkNpgc3eC5fuvY/aHots1lIHcG/8i0aE50kP7ahz0OC7iIL9Zh8xDAMsgQAwO/owF+/gRZ/QLDUl6AS9yWDkQv4Ap4qgyTF41ffQIuvJCSKX6DUi/DF5s+aT8AwKoawMt7xnyfjiqQrUl8jDkVLkRPhVGEUhqzVD7Yut/pKQ00nTkNDEKq8gJgIGEZfcVyG/v1NZm4+Cp+gJS8kHoGfIepl/GjfB1lzxcGZXYWOW5A8BT2KgIiMEZGnRGSJiCwWkUvC8iEiMkdEVoavg8NyEZGfiUiziLwsIpPzttIwKhHfI/X6Gzx27xEFDTcGpLctt/jBfoUo/NiHP7GEmgnj0vdH88+K0JueQAqYoaoHAYcDF4rIQcCVwJOqOhF4MnwP8EmClOQTgenALXlbaRgVijiBF98D2goYe9AjMzyIxxuYOfoROkcNzkwZFqD30aMIqOp6VX0hPG4BlgKjgGnA7eFptwOnhMfTgDs0YB7QJCKljaFsGKVABE2lGLIsxSPbD6ChgCnLIFP5oy3MQUATWHtCfXD7mkRBkprukk9ARMYBHwLmA8NVdX340QZgeHg8Clgb+9obYZlh9C/CVnjAQwv43T8PAwqXsiwa6ftk71xMCFx/5u3BlGWyszQ9gQgRGQjcD1yqqtvin2mw2GCXrBGR6SKyUEQWJilOAEXDKDphl3zd6qG0hTsBC0G0HDmKMxDfxjwusYU13zkk4xTMUwh6JQIikiAQgN+r6p/C4o1RNz983RSWrwPGxL4+OizLQlVnqeoUVZ2SoK6v9htGeQkr4IEzXmWzN4AWv7AzBNEUIWSGGis792bc9xZknILFHg6IiAC/BZaq6o2xjx4Gzg6PzwYeipV/IZwlOBzYGhs2GEa/Q2pqUM/DQ2h0CtMT8AkcjY3hUuSkBj9HP/p1bpn+mUxGY8i7J9CbVQcfAc4CXhGRl8KybwI/BO4VkS8DrwOnhZ89CkwFmoE24Jy8LDSMSiZ0Dorr4uHQHgtBlg8JoD62AjEh8NH7LmPSZQvCtOaFS2Heowio6t+B7u62w4L/0D9wYZ52GcZuhbguLn7BkpIErb+mr/eWl+CAa5bgqY8mY3dw3GC9QB7YikHDyIN0YpDwNYoNkC9RSjKAVamBnPf9S/FaWrJPirIq54mJgGHkgXpe0Bong+iD8TiE+RAJwJLknlz2vQvY644F2XEGCoiJgGHki/r4nUnOveMiXJGCrBqM2venWg5i8H/NDfYLFGCfQFeYCBhGX4nP0/sew59P4qkWLlFpruNPfYsxaBgVhe8FqcPDAKANr73DMXdfztPvji3I5T1VfM2JM2jDAcOoMNRPi4G3vJkJV8zluW0T875sFIH4jMHPM/y5Rt495VDcvYbgNDTkfe1cLLKQYeRDPCBoSI14JDWY2+8r0dWGOCl+MOpRkjc9ig+c9NxFTPzaWry3txSsV2A9AcMoMM/edkg6NJhPYTYVJQTqBJ456hf8c9Y+bLz4iILlITARMIwCM/JPq0hqsO6/Ppwt6CpRSV/wgD9/+NdsPSiMeViAUOQmAoZRBHyCyMOdqiTJb2gQxwXmt49h0gULgiFIKcKLGYaxi8QCgUYr/woVZ8AD6p1kZlZC/dJsJTYMo/cs/f5wHIKVg/F4AIXC0/BqUVoyGw4YRmVxwMUr+MRdl3PdhhPwwl2FuZ12t4uy3uKKnx1g1HoChlFZ+C0tTPjm86w9Z1+ebR+FT2Y/QVT5vbCsOAuBdw1bJ2AYhSbc3ustXs6V8z5NU1MrAOOatvDLcQ8EjsLw1EIGJu0rJgKGUWjCrrrU1DDx7BfT3fUtUw/B+xV44UKiWulb2rJCYyJgGIUmdNalQ4ClU4sHFd8NY/IWKgpRvlSCDYbRP4m892FrryJ44bqBKH/hridReroAAAkASURBVPgEXAjTnRW22lpPwDCKQRfdfAnLorRisHOfgE8m1PgW3+WL3/s6bqfidigDeb5gppoIGEaJSGxP8Ze2CXy8YVV6EVF3IhDNIiSBp98dy6zLPs1ejy8KEo44bnYasmidQB/9CzYcMIwS4TzzEt/766nUiqQXEe1sJWESeKljb2755meof2RBIABRhY8LQJ5hx6wnYBilQhXxMn6BnfUEovJFbeNpvH9+JuegKlLjoh5BDPASZSU2DKNQhA25Q+/WCDgoEu1FiGYdUslMMBPVvDcRmQgYRgkZ/1AnD20/oFfLhh0gqW4QZFScTE/AdTPdfxHLO2AYuwuSqMV96gVebh1Dkp5zFLjAOYPnsuJXh+K8b2J656AWON+h+QQMo0RoshOARrcDT8GRnQ8JPKBB4OmpN9Jykstn/msGbjuoQFOzx8D7FyJOkAYtH0wEDKNUiIA4bEvVkpCgpW/TIGxYLlEPoS1cYjzE8fjLl64HAoficfMvYOD9YfKTaIagj/QmK/EYEXlKRJaIyGIRuSQsv0ZE1onIS+HP1Nh3rhKRZhFZLiIn9tk6w+hPhPkJ6pxUemfhnt1kMfbCn0GO0BCLSVAvQntU39UPhgglyEqcAmao6gsiMghYJCJzws9+oqo3xE8WkYOAM4D3AiOBJ0RkkqpWwoYpwygfIrR++lCO2uPudOvb1s3+gWi7cXuUlTh836lKoyNBvRcnk5CkmD0BVV2vqi+Exy3AUmDUTr4yDbhbVTtUdTVBivJD+2yhYezuxFb0rT9KOKRuXY8zA1GL6ZA9nVgrQrtqcMloVqCUQUVEZBzwIWB+WHSRiLwsIrNFZHBYNgpYG/vaG+xcNAyjfyGxrEHRaygE6gQtebsGrf2uTs+1+JrJdRhfPpwHvbZBRAYC9wOXquo24BZgP+BgYD3w4125sYhMF5GFIrIwSceufNUwKpuclOHpeX0RUAlDkZMWgl2hTmI5CgswFIBeioCIJAgE4Peq+icAVd2oqp6q+sCtZLr864Axsa+PDsuyUNVZqjpFVackqMvndzCMyiLe+vteMK8fttriQ6MjwRoB6SLpaA+4BL0B1w2XC0crBvPoDfRmdkCA3wJLVfXGWPmI2GmnAq+Gxw8DZ4hInYiMByZCAfc9GsbuQtRCh+v73f3Hs/8H3qBTNb1NuH0XW/FoxiCZjCcpzS/seG9mBz4CnAW8IiIvhWXfBM4UkYMBBdYA5wOo6mIRuRdYQjCzcKHNDBhVRc4y3m1nHIZz9ibG77GFmaMfoV0J/QJ9iyy0pHMQ+/4iJgLiQB5VrEcRUNW/k972kMWjO/nOdcB1fbbKMPoD4Xi96aGXaf/SMH44+pEgeYhkhxaL4gY4Ocdd4QIbUnvizn0F7SIZal+wvQOGUSxCZ6Df1kbSy7Tc0TbiaBNwvAp7ZCIRd0WUgUj9/GcFIkwEDKPQdFE5HdF0huKokkdCEE0VJsPZgvYehveeOtl+gDzFwPYOGEahiVfO2H5/B7jpraP571XvTZ/quj6qwQrA/Ya+zU3j7qPREf7YciA3Lz1mh0s7jtK6dQCT3H+EW4zz7w2YCBhGMXDcrB1+qdnDeeuHCf78yOGM/c7c7LiAoVh4Y8fwfz91BepA02tJRv/3gi4vLXV1wcahKCFpnojmudCgEOwhQ/QwOb7cZhhG4UjHAnTSjruaCePQrdvw3t6SvcinqwU/3S0Cirf88RiDveAJvW+Rqk7JLbeegGEUg/QagYzbL7VqzY6f5x7vrKyr8gI04uYYNIwqx0TAMKocEwHDqHJMBAyjyjERMIwqx0TAMKocEwHDqHJMBAyjyjERMIwqx0TAMKocEwHDqHJMBAyjyjERMIwqx0TAMKocEwHDqHJMBAyjyjERMIwqx0TAMKocEwHDqHJMBAyjyjERMIwqx0TAMKocEwHDqHJMBAyjyjERMIwqpyLSkInIZqAVeKvctsQYitmzMyrNHqg8myrNnrGqOiy3sCJEAEBEFnaVJ61cmD07p9LsgcqzqdLs6Q4bDhhGlWMiYBhVTiWJwKxyG5CD2bNzKs0eqDybKs2eLqkYn4BhGOWhknoChmGUgbKLgIicJCLLRaRZRK4skw1rROQVEXlJRBaGZUNEZI6IrAxfBxfZhtkisklEXo2VdWmDBPwsfGYvi8jkEtlzjYisC5/TSyIyNfbZVaE9y0XkxCLYM0ZEnhKRJSKyWEQuCcvL8ox2Yk/ZnlGfUdWy/QAu8BowAagF/gEcVAY71gBDc8quB64Mj68EflRkG44BJgOv9mQDMBV4DBDgcGB+iey5Brisi3MPCv92dcD48G/qFtieEcDk8HgQsCK8b1me0U7sKdsz6utPuXsChwLNqrpKVTuBu4FpZbYpYhpwe3h8O3BKMW+mqs8AW3ppwzTgDg2YBzSJyIgS2NMd04C7VbVDVVcDzQR/20Las15VXwiPW4ClwCjK9Ix2Yk93FP0Z9ZVyi8AoYG3s/Rvs/EEWCwX+KiKLRGR6WDZcVdeHxxuA4WWwqzsbyvncLgq717NjQ6SS2iMi44APAfOpgGeUYw9UwDPaFcotApXCUao6GfgkcKGIHBP/UIP+XFmnUSrBBuAWYD/gYGA98ONSGyAiA4H7gUtVdVv8s3I8oy7sKfsz2lXKLQLrgDGx96PDspKiquvC103AAwTdtI1R9zF83VRqu3ZiQ1mem6puVFVPVX3gVjLd2ZLYIyIJggr3e1X9U1hctmfUlT3lfkZ9odwisACYKCLjRaQWOAN4uJQGiEijiAyKjoFPAK+GdpwdnnY28FAp7QrpzoaHgS+EHvDDga2xLnHRyBlTn0rwnCJ7zhCROhEZD0wEni/wvQX4LbBUVW+MfVSWZ9SdPeV8Rn2m3J5JAi/uCgJv6bfKcP8JBF7bfwCLIxuAvYAngZXAE8CQIttxF0H3MUkwXvxydzYQeLx/GT6zV4ApJbLnzvB+LxP8U4+Inf+t0J7lwCeLYM9RBF39l4GXwp+p5XpGO7GnbM+orz+2YtAwqpxyDwcMwygzJgKGUeWYCBhGlWMiYBhVjomAYVQ5JgKGUeWYCBhGlWMiYBhVzv8HqKaruClgPjkAAAAASUVORK5CYII=\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["plt.imshow(test_input_samples_img[1].reshape(300,300))"]},{"cell_type":"markdown","metadata":{"id":"1o_ny6T8K8kP"},"source":["# 300*300尝试 VAE"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"M5CSgM9CtSS3"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"q58mDj-9xlFO"},"outputs":[],"source":["import tensorflow as tf\n","import tensorflow_datasets as tfds\n","\n","import matplotlib.pyplot as plt\n","import numpy as np\n","\n","import os\n","import zipfile\n","import urllib.request\n","import random\n","from IPython import display\n","\n","# set a random seed\n","np.random.seed(51)\n","\n","# parameters for building the model and training\n","BATCH_SIZE=30\n","LATENT_DIM=1024\n","IMAGE_SIZE=300"]},{"cell_type":"markdown","metadata":{"id":"BbB_EWey-0Rt"},"source":["# 300*300模型搭建"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8-ar2xOUtSUA"},"outputs":[],"source":["\n","def Sampling(mu, sigma):\n","  \"\"\"Generates a random sample and combines with the encoder output\n","  \n","  Args:\n","    inputs -- output tensor from the encoder\n","\n","  Returns:\n","    `inputs` tensors combined with a random sample\n","  \"\"\"\n","  ### START CODE HERE ###\n","  mu, sigma \n","  batch = tf.shape(mu)[0]\n","  dim = tf.shape(mu)[1]\n","  epsilon = tf.keras.backend.random_normal(shape=(batch, dim))\n","  z = mu + tf.exp(0.5 * sigma) * epsilon\n","  ### END CODE HERE ###\n","  return  z"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"u87KnSs31Sro"},"outputs":[],"source":["def kl_reconstruction_loss(mu, sigma):\n","  \"\"\" Computes the Kullback-Leibler Divergence (KLD)\n","  Args:\n","    inputs -- batch from the dataset\n","    outputs -- output of the Sampling layer\n","    mu -- mean\n","    sigma -- standard deviation\n","\n","  Returns:\n","    KLD loss\n","  \"\"\"\n","  kl_loss = 1 + sigma - tf.square(mu) - tf.math.exp(sigma)\n","  return tf.reduce_mean(kl_loss) * -0.5"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"W_aR7TNrFbbh"},"outputs":[],"source":["def get_distribution(latent_dim,input_img,input_signal):\n","  input_img=tf.keras.layers.Flatten()(input_img)\n","  #input_img=tf.keras.layers.Dense(4000)(input_img)\n","  input_signal=tf.keras.layers.Flatten()(input_signal)\n","  #input_signal=tf.keras.layers.GaussianNoise(0.2)(input_signal)\n","  input_signal=tf.keras.layers.Dense(100)(input_signal)\n","  x=tf.concat([input_signal,input_img],1)\n","  x = tf.keras.layers.Dense(1000, activation='relu', kernel_regularizer=keras.regularizers.l1(0.01))(x)\n","  x = tf.keras.layers.BatchNormalization()(x)\n","  mu = tf.keras.layers.Dense(latent_dim)(x)\n","  sigma = tf.keras.layers.Dense(latent_dim)(x)\n","  return mu,sigma"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_yLvgLdoLARs"},"outputs":[],"source":["def encoder_layers(latent_dim,input_img,input_signal):\n","  '''Defines the encoder with two Conv2D and max pooling layers.'''\n","  #input_img=tf.keras.layers.GaussianNoise(0.1)(input_img)\n","  conv_1 = tf.keras.layers.Conv2D(filters=8, kernel_size=(3,3), activation='relu', padding='same',name='conv1',strides=2)(input_img)\n","  max_pool_1 = tf.keras.layers.MaxPooling2D(pool_size=(2,2))(conv_1)\n","  mu1,sigma1=get_distribution(latent_dim,max_pool_1,input_signal)\n"," \n","  conv_2 = tf.keras.layers.Conv2D(filters=16, kernel_size=(3,3), activation='relu', padding='same',name='conv2',strides=2)(max_pool_1)\n","  max_pool_2 = tf.keras.layers.MaxPooling2D(pool_size=(2,2))(conv_2)\n","  mu2,sigma2=get_distribution(latent_dim/3,max_pool_2,input_signal)\n","\n","  conv_3 = tf.keras.layers.Conv2D(filters=32, kernel_size=(4,4), activation='relu', padding='same',name='conv3',strides=2)(max_pool_2)\n","  max_pool_3 = tf.keras.layers.MaxPooling2D(pool_size=(2,2))(conv_3)\n","  mu3,sigma3=get_distribution(latent_dim/6,max_pool_3,input_signal)\n","\n","  conv_4 = tf.keras.layers.Conv2D(filters=64, kernel_size=(4,4), activation='relu', padding='same',name='conv4',strides=2)(max_pool_3)\n","  max_pool_4 = tf.keras.layers.MaxPooling2D(pool_size=(2,2))(conv_4)\n","  mu4,sigma4=get_distribution(latent_dim/12,max_pool_4,input_signal)\n","\n","\n","\n","\n","  return mu1, sigma1, mu2, sigma2, mu3, sigma3 ,mu4, sigma4"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BVSYuxNpJyb9"},"outputs":[],"source":["def get_nerual(z,input_signal):\n","  z=tf.keras.layers.Flatten()(z)\n","  z = tf.keras.layers.Dense(4000, activation = 'relu')(z)\n","  z = tf.keras.layers.BatchNormalization()(z)\n","  input_signal=tf.keras.layers.Flatten()(input_signal)\n","  input_signal = tf.keras.layers.Dense(1000 ,activation = 'relu')(input_signal)\n","  z=tf.concat([z,input_signal],1)\n","  return z"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Cu3sFkFOLRtR"},"outputs":[],"source":["def decoder_layers(z1,z2,z3,z4,input_signal):\n","  '''Defines the decoder path to upsample back to the original image size.'''\n","  #units = conv_shape[1] * conv_shape[2] * conv_shape[3]\n","  z4=get_nerual(z4,input_signal)\n","  x = tf.keras.layers.Dense(800,kernel_regularizer=keras.regularizers.l1(0.01))(z4)\n","  x = tf.keras.layers.BatchNormalization()(x)\n","  x = tf.keras.layers.Reshape([5,5,32], name=\"decode_reshape0\")(x)\n","\n","  #conv_1 = tf.keras.layers.Conv2D(filters=32, kernel_size=(4,4), activation='relu', padding='same')(x)\n","  conv_0 = tfa.layers.WeightNormalization(tf.keras.layers.Conv2D(filters=32, kernel_size=(3,3), activation='relu', padding='same'))(x)\n","  up_sample_0 = tf.keras.layers.UpSampling2D(size=(5,5))(conv_0)\n","  \n","  z3=get_nerual(z3,input_signal)\n","  z3 = tf.keras.layers.Dense(5000,kernel_regularizer=keras.regularizers.l1(0.01),name=\"decoder_dense0\")(z3)\n","  z3 = tf.keras.layers.BatchNormalization()(z3)\n","  z3 = tf.keras.layers.Reshape([25,25,8], name=\"decode_reshape1\")(z3)\n","  z3=tf.keras.layers.Conv2D(filters=32, kernel_size=(4,4), activation='relu', padding='same')(z3)\n","  up_sample_1=tf.keras.layers.Add()([up_sample_0,z3])\n","\n","  #conv_1 = tf.keras.layers.Conv2D(filters=32, kernel_size=(4,4), activation='relu', padding='same')(x)\n","  conv_1 = tfa.layers.WeightNormalization(tf.keras.layers.Conv2D(filters=32, kernel_size=(3,3), activation='relu', padding='same'))(z3)\n","  up_sample_1 = tf.keras.layers.UpSampling2D(size=(3,3))(conv_1)\n","  \n","  z2=get_nerual(z2,input_signal)\n","  z2 = tf.keras.layers.Dense(22500,kernel_regularizer=keras.regularizers.l1(0.01),name=\"decoder_dense1\")(z2)\n","  z2 = tf.keras.layers.BatchNormalization()(z2)\n","  z2 = tf.keras.layers.Reshape([75,75,4], name=\"decode_reshape2\")(z2)\n","  z2=tf.keras.layers.Conv2D(filters=32, kernel_size=(4,4), activation='relu', padding='same')(z2)\n","  up_sample_1=tf.keras.layers.Add()([up_sample_1,z2])\n","\n","\n","  # conv_2 = tf.keras.layers.Conv2D(filters=16, kernel_size=(4,4), activation='relu', padding='same')(up_sample_1)\n","  conv_2 = tfa.layers.WeightNormalization(tf.keras.layers.Conv2D(filters=16, kernel_size=(3,3), activation='relu', padding='same'))(up_sample_1)\n","  # conv_2 = tf.keras.layers.BatchNormalization()(conv_2)\n","  up_sample_2 = tf.keras.layers.UpSampling2D(size=(2,2))(conv_2)\n","\n","  z1=get_nerual(z1,input_signal)\n","  z1 = tf.keras.layers.Dense(22500,kernel_regularizer=keras.regularizers.l1(0.01))(z1)\n","  z1 = tf.keras.layers.BatchNormalization()(z1)\n","  z1 = tf.keras.layers.Reshape([150,150,1], name=\"decode_reshape3\")(z1)\n","  z1=tf.keras.layers.Conv2D(filters=16, kernel_size=(3,3), activation='relu', padding='same')(z1)\n","  up_sample_2=tf.keras.layers.Add()([up_sample_2,z1])\n","\n","  #conv_3 = tf.keras.layers.Conv2D(filters=8, kernel_size=(2,2), activation='relu', padding='same')(up_sample_2)\n","  # conv_3 = tf.keras.layers.BatchNormalization()(conv_3)\n","  conv_3 = tfa.layers.WeightNormalization(tf.keras.layers.Conv2D(filters=8, kernel_size=(2,2), activation='relu', padding='same'))(up_sample_2)\n","  up_sample_3 = tf.keras.layers.UpSampling2D(size=(2,2))(conv_3)\n","\n","  conv_4 = tf.keras.layers.Conv2D(filters=1, kernel_size=(1,1), activation='sigmoid', padding='same')(up_sample_3)\n","\n","  return conv_4"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"H0XDv9fTBfLi"},"outputs":[],"source":["def vae_models():\n","  latent_dim=1024\n","  inputs1 = tf.keras.layers.Input(shape=(300, 300, 1,))\n","  inputs2= tf.keras.layers.Input(shape=(3))\n","  mu1, sigma1, mu2, sigma2, mu3, sigma3, mu4, sigma4=encoder_layers(latent_dim,inputs1,inputs2)\n","  z1 = Sampling(mu1, sigma1)\n","  z2 = Sampling(mu2, sigma2)\n","  z3 = Sampling(mu3, sigma3)\n","  z4 = Sampling(mu4, sigma4)\n","  decoder_output=decoder_layers(z1,z2,z3,z4,inputs2)\n","  model = tf.keras.Model(inputs =[inputs1,inputs2], outputs=decoder_output)\n","  loss1 = kl_reconstruction_loss(mu1, sigma1)\n","  loss2 = kl_reconstruction_loss(mu2, sigma2)\n","  loss3 = kl_reconstruction_loss(mu3, sigma3)\n","  loss4 = kl_reconstruction_loss(mu4, sigma4)\n","  loss=loss1+loss2+loss3+loss4\n","  model.add_loss(loss)\n","  return model\n","\n","\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2724,"status":"ok","timestamp":1661840543634,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"O_KNUhubGPyn","outputId":"d0a019ea-ba5c-4f81-a9e3-7f8e6799c6dc"},"outputs":[{"name":"stdout","output_type":"stream","text":["Model: \"model\"\n","__________________________________________________________________________________________________\n"," Layer (type)                   Output Shape         Param #     Connected to                     \n","==================================================================================================\n"," input_1 (InputLayer)           [(None, 300, 300, 1  0           []                               \n","                                )]                                                                \n","                                                                                                  \n"," conv1 (Conv2D)                 (None, 150, 150, 8)  80          ['input_1[0][0]']                \n","                                                                                                  \n"," max_pooling2d (MaxPooling2D)   (None, 75, 75, 8)    0           ['conv1[0][0]']                  \n","                                                                                                  \n"," conv2 (Conv2D)                 (None, 38, 38, 16)   1168        ['max_pooling2d[0][0]']          \n","                                                                                                  \n"," max_pooling2d_1 (MaxPooling2D)  (None, 19, 19, 16)  0           ['conv2[0][0]']                  \n","                                                                                                  \n"," input_2 (InputLayer)           [(None, 3)]          0           []                               \n","                                                                                                  \n"," conv3 (Conv2D)                 (None, 10, 10, 32)   8224        ['max_pooling2d_1[0][0]']        \n","                                                                                                  \n"," flatten_5 (Flatten)            (None, 3)            0           ['input_2[0][0]']                \n","                                                                                                  \n"," max_pooling2d_2 (MaxPooling2D)  (None, 5, 5, 32)    0           ['conv3[0][0]']                  \n","                                                                                                  \n"," dense_8 (Dense)                (None, 100)          400         ['flatten_5[0][0]']              \n","                                                                                                  \n"," flatten_4 (Flatten)            (None, 800)          0           ['max_pooling2d_2[0][0]']        \n","                                                                                                  \n"," tf.concat_2 (TFOpLambda)       (None, 900)          0           ['dense_8[0][0]',                \n","                                                                  'flatten_4[0][0]']              \n","                                                                                                  \n"," flatten_3 (Flatten)            (None, 3)            0           ['input_2[0][0]']                \n","                                                                                                  \n"," dense_9 (Dense)                (None, 1000)         901000      ['tf.concat_2[0][0]']            \n","                                                                                                  \n"," dense_4 (Dense)                (None, 100)          400         ['flatten_3[0][0]']              \n","                                                                                                  \n"," flatten_2 (Flatten)            (None, 5776)         0           ['max_pooling2d_1[0][0]']        \n","                                                                                                  \n"," batch_normalization_2 (BatchNo  (None, 1000)        4000        ['dense_9[0][0]']                \n"," rmalization)                                                                                     \n","                                                                                                  \n"," tf.concat_1 (TFOpLambda)       (None, 5876)         0           ['dense_4[0][0]',                \n","                                                                  'flatten_2[0][0]']              \n","                                                                                                  \n"," dense_10 (Dense)               (None, 170)          170170      ['batch_normalization_2[0][0]']  \n","                                                                                                  \n"," dense_5 (Dense)                (None, 1000)         5877000     ['tf.concat_1[0][0]']            \n","                                                                                                  \n"," flatten_1 (Flatten)            (None, 3)            0           ['input_2[0][0]']                \n","                                                                                                  \n"," dense_11 (Dense)               (None, 170)          170170      ['batch_normalization_2[0][0]']  \n","                                                                                                  \n"," tf.compat.v1.shape_4 (TFOpLamb  (2,)                0           ['dense_10[0][0]']               \n"," da)                                                                                              \n","                                                                                                  \n"," tf.compat.v1.shape_5 (TFOpLamb  (2,)                0           ['dense_10[0][0]']               \n"," da)                                                                                              \n","                                                                                                  \n"," batch_normalization_1 (BatchNo  (None, 1000)        4000        ['dense_5[0][0]']                \n"," rmalization)                                                                                     \n","                                                                                                  \n"," dense (Dense)                  (None, 100)          400         ['flatten_1[0][0]']              \n","                                                                                                  \n"," flatten (Flatten)              (None, 45000)        0           ['max_pooling2d[0][0]']          \n","                                                                                                  \n"," tf.math.multiply_4 (TFOpLambda  (None, 170)         0           ['dense_11[0][0]']               \n"," )                                                                                                \n","                                                                                                  \n"," tf.__operators__.getitem_4 (Sl  ()                  0           ['tf.compat.v1.shape_4[0][0]']   \n"," icingOpLambda)                                                                                   \n","                                                                                                  \n"," tf.__operators__.getitem_5 (Sl  ()                  0           ['tf.compat.v1.shape_5[0][0]']   \n"," icingOpLambda)                                                                                   \n","                                                                                                  \n"," dense_6 (Dense)                (None, 341)          341341      ['batch_normalization_1[0][0]']  \n","                                                                                                  \n"," tf.concat (TFOpLambda)         (None, 45100)        0           ['dense[0][0]',                  \n","                                                                  'flatten[0][0]']                \n","                                                                                                  \n"," tf.math.exp_2 (TFOpLambda)     (None, 170)          0           ['tf.math.multiply_4[0][0]']     \n","                                                                                                  \n"," tf.random.normal_2 (TFOpLambda  (None, 170)         0           ['tf.__operators__.getitem_4[0][0\n"," )                                                               ]',                              \n","                                                                  'tf.__operators__.getitem_5[0][0\n","                                                                 ]']                              \n","                                                                                                  \n"," dense_7 (Dense)                (None, 341)          341341      ['batch_normalization_1[0][0]']  \n","                                                                                                  \n"," tf.compat.v1.shape_2 (TFOpLamb  (2,)                0           ['dense_6[0][0]']                \n"," da)                                                                                              \n","                                                                                                  \n"," tf.compat.v1.shape_3 (TFOpLamb  (2,)                0           ['dense_6[0][0]']                \n"," da)                                                                                              \n","                                                                                                  \n"," dense_1 (Dense)                (None, 1000)         45101000    ['tf.concat[0][0]']              \n","                                                                                                  \n"," tf.math.multiply_5 (TFOpLambda  (None, 170)         0           ['tf.math.exp_2[0][0]',          \n"," )                                                                'tf.random.normal_2[0][0]']     \n","                                                                                                  \n"," tf.math.multiply_2 (TFOpLambda  (None, 341)         0           ['dense_7[0][0]']                \n"," )                                                                                                \n","                                                                                                  \n"," tf.__operators__.getitem_2 (Sl  ()                  0           ['tf.compat.v1.shape_2[0][0]']   \n"," icingOpLambda)                                                                                   \n","                                                                                                  \n"," tf.__operators__.getitem_3 (Sl  ()                  0           ['tf.compat.v1.shape_3[0][0]']   \n"," icingOpLambda)                                                                                   \n","                                                                                                  \n"," batch_normalization (BatchNorm  (None, 1000)        4000        ['dense_1[0][0]']                \n"," alization)                                                                                       \n","                                                                                                  \n"," tf.__operators__.add_2 (TFOpLa  (None, 170)         0           ['dense_10[0][0]',               \n"," mbda)                                                            'tf.math.multiply_5[0][0]']     \n","                                                                                                  \n"," tf.math.exp_1 (TFOpLambda)     (None, 341)          0           ['tf.math.multiply_2[0][0]']     \n","                                                                                                  \n"," tf.random.normal_1 (TFOpLambda  (None, 341)         0           ['tf.__operators__.getitem_2[0][0\n"," )                                                               ]',                              \n","                                                                  'tf.__operators__.getitem_3[0][0\n","                                                                 ]']                              \n","                                                                                                  \n"," dense_2 (Dense)                (None, 1024)         1025024     ['batch_normalization[0][0]']    \n","                                                                                                  \n"," flatten_10 (Flatten)           (None, 170)          0           ['tf.__operators__.add_2[0][0]'] \n","                                                                                                  \n"," tf.math.multiply_3 (TFOpLambda  (None, 341)         0           ['tf.math.exp_1[0][0]',          \n"," )                                                                'tf.random.normal_1[0][0]']     \n","                                                                                                  \n"," dense_3 (Dense)                (None, 1024)         1025024     ['batch_normalization[0][0]']    \n","                                                                                                  \n"," tf.compat.v1.shape (TFOpLambda  (2,)                0           ['dense_2[0][0]']                \n"," )                                                                                                \n","                                                                                                  \n"," tf.compat.v1.shape_1 (TFOpLamb  (2,)                0           ['dense_2[0][0]']                \n"," da)                                                                                              \n","                                                                                                  \n"," dense_19 (Dense)               (None, 4000)         684000      ['flatten_10[0][0]']             \n","                                                                                                  \n"," flatten_11 (Flatten)           (None, 3)            0           ['input_2[0][0]']                \n","                                                                                                  \n"," tf.__operators__.add_1 (TFOpLa  (None, 341)         0           ['dense_6[0][0]',                \n"," mbda)                                                            'tf.math.multiply_3[0][0]']     \n","                                                                                                  \n"," tf.math.multiply (TFOpLambda)  (None, 1024)         0           ['dense_3[0][0]']                \n","                                                                                                  \n"," tf.__operators__.getitem (Slic  ()                  0           ['tf.compat.v1.shape[0][0]']     \n"," ingOpLambda)                                                                                     \n","                                                                                                  \n"," tf.__operators__.getitem_1 (Sl  ()                  0           ['tf.compat.v1.shape_1[0][0]']   \n"," icingOpLambda)                                                                                   \n","                                                                                                  \n"," batch_normalization_6 (BatchNo  (None, 4000)        16000       ['dense_19[0][0]']               \n"," rmalization)                                                                                     \n","                                                                                                  \n"," dense_20 (Dense)               (None, 1000)         4000        ['flatten_11[0][0]']             \n","                                                                                                  \n"," flatten_12 (Flatten)           (None, 341)          0           ['tf.__operators__.add_1[0][0]'] \n","                                                                                                  \n"," tf.math.exp (TFOpLambda)       (None, 1024)         0           ['tf.math.multiply[0][0]']       \n","                                                                                                  \n"," tf.random.normal (TFOpLambda)  (None, 1024)         0           ['tf.__operators__.getitem[0][0]'\n","                                                                 , 'tf.__operators__.getitem_1[0][\n","                                                                 0]']                             \n","                                                                                                  \n"," tf.concat_5 (TFOpLambda)       (None, 5000)         0           ['batch_normalization_6[0][0]',  \n","                                                                  'dense_20[0][0]']               \n","                                                                                                  \n"," dense_21 (Dense)               (None, 4000)         1368000     ['flatten_12[0][0]']             \n","                                                                                                  \n"," flatten_13 (Flatten)           (None, 3)            0           ['input_2[0][0]']                \n","                                                                                                  \n"," tf.math.multiply_1 (TFOpLambda  (None, 1024)        0           ['tf.math.exp[0][0]',            \n"," )                                                                'tf.random.normal[0][0]']       \n","                                                                                                  \n"," decoder_dense0 (Dense)         (None, 5000)         25005000    ['tf.concat_5[0][0]']            \n","                                                                                                  \n"," batch_normalization_8 (BatchNo  (None, 4000)        16000       ['dense_21[0][0]']               \n"," rmalization)                                                                                     \n","                                                                                                  \n"," dense_22 (Dense)               (None, 1000)         4000        ['flatten_13[0][0]']             \n","                                                                                                  \n"," tf.__operators__.add (TFOpLamb  (None, 1024)        0           ['dense_2[0][0]',                \n"," da)                                                              'tf.math.multiply_1[0][0]']     \n","                                                                                                  \n"," batch_normalization_7 (BatchNo  (None, 5000)        20000       ['decoder_dense0[0][0]']         \n"," rmalization)                                                                                     \n","                                                                                                  \n"," tf.concat_6 (TFOpLambda)       (None, 5000)         0           ['batch_normalization_8[0][0]',  \n","                                                                  'dense_22[0][0]']               \n","                                                                                                  \n"," flatten_14 (Flatten)           (None, 1024)         0           ['tf.__operators__.add[0][0]']   \n","                                                                                                  \n"," decode_reshape1 (Reshape)      (None, 25, 25, 8)    0           ['batch_normalization_7[0][0]']  \n","                                                                                                  \n"," decoder_dense1 (Dense)         (None, 22500)        112522500   ['tf.concat_6[0][0]']            \n","                                                                                                  \n"," dense_23 (Dense)               (None, 4000)         4100000     ['flatten_14[0][0]']             \n","                                                                                                  \n"," flatten_15 (Flatten)           (None, 3)            0           ['input_2[0][0]']                \n","                                                                                                  \n"," conv2d_1 (Conv2D)              (None, 25, 25, 32)   4128        ['decode_reshape1[0][0]']        \n","                                                                                                  \n"," batch_normalization_9 (BatchNo  (None, 22500)       90000       ['decoder_dense1[0][0]']         \n"," rmalization)                                                                                     \n","                                                                                                  \n"," batch_normalization_10 (BatchN  (None, 4000)        16000       ['dense_23[0][0]']               \n"," ormalization)                                                                                    \n","                                                                                                  \n"," dense_24 (Dense)               (None, 1000)         4000        ['flatten_15[0][0]']             \n","                                                                                                  \n"," weight_normalization_1 (Weight  (None, 25, 25, 32)  18529       ['conv2d_1[0][0]']               \n"," Normalization)                                                                                   \n","                                                                                                  \n"," decode_reshape2 (Reshape)      (None, 75, 75, 4)    0           ['batch_normalization_9[0][0]']  \n","                                                                                                  \n"," tf.concat_7 (TFOpLambda)       (None, 5000)         0           ['batch_normalization_10[0][0]', \n","                                                                  'dense_24[0][0]']               \n","                                                                                                  \n"," up_sampling2d_1 (UpSampling2D)  (None, 75, 75, 32)  0           ['weight_normalization_1[0][0]'] \n","                                                                                                  \n"," conv2d_3 (Conv2D)              (None, 75, 75, 32)   2080        ['decode_reshape2[0][0]']        \n","                                                                                                  \n"," dense_25 (Dense)               (None, 22500)        112522500   ['tf.concat_7[0][0]']            \n","                                                                                                  \n"," add_1 (Add)                    (None, 75, 75, 32)   0           ['up_sampling2d_1[0][0]',        \n","                                                                  'conv2d_3[0][0]']               \n","                                                                                                  \n"," batch_normalization_11 (BatchN  (None, 22500)       90000       ['dense_25[0][0]']               \n"," ormalization)                                                                                    \n","                                                                                                  \n"," weight_normalization_2 (Weight  (None, 75, 75, 16)  9265        ['add_1[0][0]']                  \n"," Normalization)                                                                                   \n","                                                                                                  \n"," decode_reshape3 (Reshape)      (None, 150, 150, 1)  0           ['batch_normalization_11[0][0]'] \n","                                                                                                  \n"," up_sampling2d_2 (UpSampling2D)  (None, 150, 150, 16  0          ['weight_normalization_2[0][0]'] \n","                                )                                                                 \n","                                                                                                  \n"," conv2d_5 (Conv2D)              (None, 150, 150, 16  160         ['decode_reshape3[0][0]']        \n","                                )                                                                 \n","                                                                                                  \n"," add_2 (Add)                    (None, 150, 150, 16  0           ['up_sampling2d_2[0][0]',        \n","                                )                                 'conv2d_5[0][0]']               \n","                                                                                                  \n"," weight_normalization_3 (Weight  (None, 150, 150, 8)  1049       ['add_2[0][0]']                  \n"," Normalization)                                                                                   \n","                                                                                                  \n"," up_sampling2d_3 (UpSampling2D)  (None, 300, 300, 8)  0          ['weight_normalization_3[0][0]'] \n","                                                                                                  \n"," conv2d_7 (Conv2D)              (None, 300, 300, 1)  9           ['up_sampling2d_3[0][0]']        \n","                                                                                                  \n"," conv4 (Conv2D)                 (None, 3, 3, 64)     32832       ['max_pooling2d_2[0][0]']        \n","                                                                                                  \n"," flatten_7 (Flatten)            (None, 3)            0           ['input_2[0][0]']                \n","                                                                                                  \n"," max_pooling2d_3 (MaxPooling2D)  (None, 1, 1, 64)    0           ['conv4[0][0]']                  \n","                                                                                                  \n"," dense_12 (Dense)               (None, 100)          400         ['flatten_7[0][0]']              \n","                                                                                                  \n"," flatten_6 (Flatten)            (None, 64)           0           ['max_pooling2d_3[0][0]']        \n","                                                                                                  \n"," tf.concat_3 (TFOpLambda)       (None, 164)          0           ['dense_12[0][0]',               \n","                                                                  'flatten_6[0][0]']              \n","                                                                                                  \n"," dense_13 (Dense)               (None, 1000)         165000      ['tf.concat_3[0][0]']            \n","                                                                                                  \n"," tf.__operators__.add_4 (TFOpLa  (None, 1024)        0           ['dense_3[0][0]']                \n"," mbda)                                                                                            \n","                                                                                                  \n"," tf.math.square (TFOpLambda)    (None, 1024)         0           ['dense_2[0][0]']                \n","                                                                                                  \n"," tf.__operators__.add_5 (TFOpLa  (None, 341)         0           ['dense_7[0][0]']                \n"," mbda)                                                                                            \n","                                                                                                  \n"," tf.math.square_1 (TFOpLambda)  (None, 341)          0           ['dense_6[0][0]']                \n","                                                                                                  \n"," batch_normalization_3 (BatchNo  (None, 1000)        4000        ['dense_13[0][0]']               \n"," rmalization)                                                                                     \n","                                                                                                  \n"," tf.math.subtract (TFOpLambda)  (None, 1024)         0           ['tf.__operators__.add_4[0][0]', \n","                                                                  'tf.math.square[0][0]']         \n","                                                                                                  \n"," tf.math.exp_4 (TFOpLambda)     (None, 1024)         0           ['dense_3[0][0]']                \n","                                                                                                  \n"," tf.math.subtract_2 (TFOpLambda  (None, 341)         0           ['tf.__operators__.add_5[0][0]', \n"," )                                                                'tf.math.square_1[0][0]']       \n","                                                                                                  \n"," tf.math.exp_5 (TFOpLambda)     (None, 341)          0           ['dense_7[0][0]']                \n","                                                                                                  \n"," tf.__operators__.add_6 (TFOpLa  (None, 170)         0           ['dense_11[0][0]']               \n"," mbda)                                                                                            \n","                                                                                                  \n"," tf.math.square_2 (TFOpLambda)  (None, 170)          0           ['dense_10[0][0]']               \n","                                                                                                  \n"," dense_15 (Dense)               (None, 85)           85085       ['batch_normalization_3[0][0]']  \n","                                                                                                  \n"," dense_14 (Dense)               (None, 85)           85085       ['batch_normalization_3[0][0]']  \n","                                                                                                  \n"," tf.math.subtract_1 (TFOpLambda  (None, 1024)        0           ['tf.math.subtract[0][0]',       \n"," )                                                                'tf.math.exp_4[0][0]']          \n","                                                                                                  \n"," tf.math.subtract_3 (TFOpLambda  (None, 341)         0           ['tf.math.subtract_2[0][0]',     \n"," )                                                                'tf.math.exp_5[0][0]']          \n","                                                                                                  \n"," tf.math.subtract_4 (TFOpLambda  (None, 170)         0           ['tf.__operators__.add_6[0][0]', \n"," )                                                                'tf.math.square_2[0][0]']       \n","                                                                                                  \n"," tf.math.exp_6 (TFOpLambda)     (None, 170)          0           ['dense_11[0][0]']               \n","                                                                                                  \n"," tf.__operators__.add_7 (TFOpLa  (None, 85)          0           ['dense_15[0][0]']               \n"," mbda)                                                                                            \n","                                                                                                  \n"," tf.math.square_3 (TFOpLambda)  (None, 85)           0           ['dense_14[0][0]']               \n","                                                                                                  \n"," tf.math.reduce_mean (TFOpLambd  ()                  0           ['tf.math.subtract_1[0][0]']     \n"," a)                                                                                               \n","                                                                                                  \n"," tf.math.reduce_mean_1 (TFOpLam  ()                  0           ['tf.math.subtract_3[0][0]']     \n"," bda)                                                                                             \n","                                                                                                  \n"," tf.math.subtract_5 (TFOpLambda  (None, 170)         0           ['tf.math.subtract_4[0][0]',     \n"," )                                                                'tf.math.exp_6[0][0]']          \n","                                                                                                  \n"," tf.math.subtract_6 (TFOpLambda  (None, 85)          0           ['tf.__operators__.add_7[0][0]', \n"," )                                                                'tf.math.square_3[0][0]']       \n","                                                                                                  \n"," tf.math.exp_7 (TFOpLambda)     (None, 85)           0           ['dense_15[0][0]']               \n","                                                                                                  \n"," tf.math.multiply_8 (TFOpLambda  ()                  0           ['tf.math.reduce_mean[0][0]']    \n"," )                                                                                                \n","                                                                                                  \n"," tf.math.multiply_9 (TFOpLambda  ()                  0           ['tf.math.reduce_mean_1[0][0]']  \n"," )                                                                                                \n","                                                                                                  \n"," tf.math.reduce_mean_2 (TFOpLam  ()                  0           ['tf.math.subtract_5[0][0]']     \n"," bda)                                                                                             \n","                                                                                                  \n"," tf.math.subtract_7 (TFOpLambda  (None, 85)          0           ['tf.math.subtract_6[0][0]',     \n"," )                                                                'tf.math.exp_7[0][0]']          \n","                                                                                                  \n"," tf.__operators__.add_8 (TFOpLa  ()                  0           ['tf.math.multiply_8[0][0]',     \n"," mbda)                                                            'tf.math.multiply_9[0][0]']     \n","                                                                                                  \n"," tf.math.multiply_10 (TFOpLambd  ()                  0           ['tf.math.reduce_mean_2[0][0]']  \n"," a)                                                                                               \n","                                                                                                  \n"," tf.math.reduce_mean_3 (TFOpLam  ()                  0           ['tf.math.subtract_7[0][0]']     \n"," bda)                                                                                             \n","                                                                                                  \n"," tf.__operators__.add_9 (TFOpLa  ()                  0           ['tf.__operators__.add_8[0][0]', \n"," mbda)                                                            'tf.math.multiply_10[0][0]']    \n","                                                                                                  \n"," tf.math.multiply_11 (TFOpLambd  ()                  0           ['tf.math.reduce_mean_3[0][0]']  \n"," a)                                                                                               \n","                                                                                                  \n"," tf.__operators__.add_10 (TFOpL  ()                  0           ['tf.__operators__.add_9[0][0]', \n"," ambda)                                                           'tf.math.multiply_11[0][0]']    \n","                                                                                                  \n"," add_loss (AddLoss)             ()                   0           ['tf.__operators__.add_10[0][0]']\n","                                                                                                  \n","==================================================================================================\n","Total params: 311,844,364\n","Trainable params: 311,697,969\n","Non-trainable params: 146,395\n","__________________________________________________________________________________________________\n"]}],"source":["\n","vae_auto_models = vae_models()\n","vae_auto_models.summary()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"LavSmA5F3kz_"},"outputs":[],"source":["optimizer = tf.keras.optimizers.Adam(learning_rate=0.0008)\n","loss_metric = tf.keras.metrics.Mean()\n","mse_loss = tf.keras.losses.MeanSquaredError()\n","bce_loss = tf.keras.losses.BinaryCrossentropy()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"PyohJgdIF9_n"},"outputs":[],"source":["# current_time = datetime.datetime.now().strftime(\"%Y%m%d-%H%M%S\")\n","# train_log_dir = 'logs/gradient_tape/' + current_time + '/train'\n","# test_log_dir = 'logs/gradient_tape/' + current_time + '/test'\n","# train_summary_writer = tf.summary.create_file_writer(train_log_dir)\n","# test_summary_writer = tf.summary.create_file_writer(test_log_dir)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XRyxdjbuwRP4"},"outputs":[],"source":["### 感知模型Perceptual Loss\n","def VGGloss(y_true, y_pred):  # Note the parameter order\n","    from keras.applications.vgg16 import VGG16\n","    mod = VGG16(include_top=False, weights='imagenet')\n","    pred = K.concatenate([y_pred, y_pred, y_pred])\n","    true = K.concatenate([y_true, y_true, y_true])\n","    vggmodel = mod \n","    f_p = vggmodel(pred)  \n","    f_t = vggmodel(true)  \n","    return K.mean(K.square(f_p - f_t)) \n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XCNACPjJ0u7Y"},"outputs":[],"source":["# % tensorboard --logdir logs/gradient_tape"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":451},"executionInfo":{"elapsed":2546645,"status":"ok","timestamp":1661843447190,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"GwHM-kqczve5","outputId":"bf974786-eeae-47b3-ef35-f2e85cee6129"},"outputs":[{"data":{"image/png":"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\n","text/plain":["<Figure size 432x432 with 30 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["Epoch: 249 step: 20 mean loss = 3721.739\n","Epoch: 249 step: 21 mean loss = 3721.611\n","Epoch: 249 step: 22 mean loss = 3721.4773\n","Epoch: 249 step: 23 mean loss = 3721.345\n","Epoch: 249 step: 24 mean loss = 3721.216\n","Epoch: 249 step: 25 mean loss = 3721.0132\n"]}],"source":["# Training loop. Display generated images each epoch\n","\n","### START CODE HERE ###\n","epochs =250\n","### END CODE HERE ###\n","\n","#random_vector_for_generation = tf.random.normal(shape=[16, LATENT_DIM])\n","#generate_and_save_images(decoder, 0, 0, random_vector_for_generation)\n","\n","for epoch in range(epochs):\n","  print('Start of epoch %d' % (epoch,))\n","\n","  # Iterate over the batches of the dataset.\n","  for step, x_batch_train in enumerate(training_dataset):\n","    with tf.GradientTape() as tape:\n","      ### START CODE HERE ### \n","      reconstructed = vae_auto_models(x_batch_train[0])\n","      # Compute reconstruction loss\n","      flattened_inputs = tf.reshape(x_batch_train[1], shape=[-1])\n","      flattened_outputs = tf.reshape(reconstructed, shape=[-1])\n","      loss = bce_loss(flattened_inputs, flattened_outputs) * 300 * 300 * 1\n","      loss += sum(vae_auto_models.losses) \n","\n","    grads =tape.gradient(loss, vae_auto_models.trainable_weights)\n","    optimizer.apply_gradients(zip(grads, vae_auto_models.trainable_weights))\n","    ### END CODE HERE\n","    \n","    loss_metric(loss)\n","\n","    if step % 10 == 0:\n","      display.clear_output(wait=False)    \n","      generate_and_save_images(vae_auto_models, epoch, step, x_batch_train[0],img_size)\n","    print('Epoch: %s step: %s mean loss = %s' % (epoch, step, loss_metric.result().numpy()))\n","  # with train_summary_writer.as_default():\n","  #   tf.summary.scalar('loss', loss_metric.result().numpy(), step=epoch)\n"," "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Z-A8UZSZnRyN"},"outputs":[],"source":["test_dataset = validation_dataset.take(2)\n","output_samples = []\n","\n","for input_image in tfds.as_numpy(test_dataset):\n","      output_samples = input_image\n","\n","idxs = np.random.choice(64, size=10)\n","\n","vae_predicted = vae_auto_models.predict(test_dataset)*255\n","#display_results(output_samples[idxs], vae_predicted[idxs])"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":287},"executionInfo":{"elapsed":12,"status":"ok","timestamp":1661401103686,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"wv0SDN8Tq7Tc","outputId":"8676d1c8-ca83-4846-ff84-779dd21da730"},"outputs":[{"data":{"text/plain":["<matplotlib.image.AxesImage at 0x7f3ee0184790>"]},"execution_count":95,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["aa=vae_predicted[59].reshape([300,300])\n","aa=aa*25500\n","plt.imshow(aa)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":11,"status":"ok","timestamp":1661401103687,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"Un_YgfuyqWl3","outputId":"93c0b1c8-f602-420e-a93a-ad8fa08690f1"},"outputs":[{"data":{"text/plain":["(60, 300, 300, 1)"]},"execution_count":96,"metadata":{},"output_type":"execute_result"}],"source":["vae_predicted.shape"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"F8h0IfbTLfHu"},"outputs":[],"source":["convolutional_model, convolutional_encoder_model = convolutional_auto_encoder()\n","convolutional_model.summary()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4884,"status":"ok","timestamp":1661843505369,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"owq0kU5LC7tG","outputId":"915b6238-e39b-456e-b583-49c7c21aa1d3"},"outputs":[{"name":"stderr","output_type":"stream","text":["WARNING:tensorflow:Compiled the loaded model, but the compiled metrics have yet to be built. `model.compile_metrics` will be empty until you train or evaluate the model.\n"]}],"source":["vae_auto_models.save(r'/content/drive/MyDrive/Colab Notebooks/fianl_project/model/model_epoch500_differ_allpart300_bt30_lt1024.h5')"]},{"cell_type":"code","execution_count":29,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":21859,"status":"ok","timestamp":1662973936294,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"wcpdCeSwDZNz","outputId":"98f73a28-f6e1-4319-d010-946b020b7f12"},"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:tensorflow:No training configuration found in the save file, so the model was *not* compiled. Compile it manually.\n"]}],"source":["vae_auto_models = tf.keras.models.load_model(r'/content/drive/MyDrive/Colab Notebooks/fianl_project/model/model_epoch500_differ_allpart300_bt30_lt1024.h5')"]},{"cell_type":"markdown","metadata":{"id":"5fgimpoJIc50"},"source":["# IOU Pipeline"]},{"cell_type":"code","execution_count":31,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":290},"executionInfo":{"elapsed":15003,"status":"ok","timestamp":1662973966441,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"DCoPEDrgfC2i","outputId":"2dd5942b-bbf2-4670-f97e-401325148387"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/tensorflow/python/data/ops/structured_function.py:265: UserWarning: Even though the `tf.config.experimental_run_functions_eagerly` option is set, this option does not apply to tf.data functions. To force eager execution of tf.data functions, please use `tf.data.experimental.enable_debug_mode()`.\n","  \"Even though the `tf.config.experimental_run_functions_eagerly` \"\n"]},{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 1.0, 'initial_img')"]},"metadata":{},"execution_count":31},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 2 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["def display_one_row(disp_images, offset, shape=(img_size, img_size)):\n","  '''Display sample outputs in one row.'''\n","  for idx, test_image in enumerate(disp_images):\n","    plt.subplot(3, 10, offset + idx + 1)\n","    plt.xticks([])\n","    plt.yticks([])\n","    test_image = np.reshape(test_image, shape)\n","    plt.imshow(test_image, cmap='gray')\n","\n","\n","def display_results(disp_input_images, disp_predicted,disp_expect, enc_shape=(8,4)):\n","  '''Displays the input, encoded, and decoded output values.'''\n","  plt.figure(figsize=(15, 5))\n","  display_one_row(disp_input_images, 0, shape=(img_size,img_size,))\n","  #display_one_row(disp_encoded, 10, shape=enc_shape)\n","  display_one_row(disp_expect, 10, shape=(img_size,img_size,))\n","  display_one_row(disp_predicted, 20, shape=(img_size,img_size,))\n","# take 1 batch of the dataset\n","#test_dataset = test_dataset.take(1)\n","\n","# take the input images and put them in a list\n","# output_samples = []\n","# for input_image in tfds.as_numpy(X_test):\n","#       output_samples = input_image\n","output_samples=data_contours\n","# pick 10 indices\n","idxs = np.array([981])\n","\n","# prepare test samples as a batch of 10 images\n","conv_output_samples = np.array(output_samples[idxs])\n","conv_output_samples = np.reshape(conv_output_samples, (1,img_size,img_size, 1))\n","test_input_samples=np.array(initial_img)\n","test_input_samples_img = np.reshape(test_input_samples, (1,img_size,img_size, 1))\n","test_input_sample_signal=np.array(signal_data[idxs])\n","# get the encoder ouput\n","#encoded = convolutional_encoder_model.predict([test_input_samples_img,test_input_sample_signal])\n","\n","# get a prediction for some values in the dataset\n","predicted = vae_auto_models.predict([test_input_samples_img,test_input_sample_signal])\n","\n","# display the samples, encodings and decoded values!\n","#display_results(test_input_samples,predicted,conv_output_samples, enc_shape=(7,7))\n","predicteds=np.reshape(predicted,[300,300])\n","conv_output_samples=np.reshape(conv_output_samples,[300,300])\n","plt.subplot(1,2,1)\n","plt.title('predicted_img',color='blue') \n","plt.imshow(predicteds)\n","plt.subplot(1,2,2)\n","plt.imshow(conv_output_samples)\n","plt.title('initial_img',color='blue') "]},{"cell_type":"code","execution_count":32,"metadata":{"executionInfo":{"elapsed":495,"status":"ok","timestamp":1662973976479,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"kJoU4i-9Ifzi"},"outputs":[],"source":["def binary(img,thresh):\n","  height, width = img.shape[0:2]\n","  for row in range(height):\n","    for col in range(width):\n","        # 获取到灰度值\n","        gray = img[row, col]\n","        # 如果灰度值高于阈值 就等于255最大值\n","        if gray > thresh:\n","            img[row, col] = 1\n","        # 如果小于阈值，就直接改为0\n","        elif gray < thresh:\n","            img[row, col] = 0\n","  return img"]},{"cell_type":"code","execution_count":33,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":222},"executionInfo":{"elapsed":967,"status":"ok","timestamp":1662973978431,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"oayYUKMLIf26","outputId":"3b0c7ddf-b2ab-4c88-e2f6-4691efd5ec38"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.image.AxesImage at 0x7f55224dd390>"]},"metadata":{},"execution_count":33},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 2 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["predicteds=predicteds*255\n","conv_output_samples=conv_output_samples*255\n","predicteds=binary(predicteds,130)\n","conv_output_samples=binary(conv_output_samples,60)\n","plt.subplot(1,2,1)\n","#plt.title('predicted_img',color='blue') \n","plt.imshow(predicteds)\n","plt.subplot(1,2,2)\n","#plt.title('initial_img',color='blue') \n","plt.imshow(conv_output_samples)"]},{"cell_type":"code","execution_count":34,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7,"status":"ok","timestamp":1662973978432,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"TdUw7irlIf6W","outputId":"2155ebae-91ea-42a2-fcf1-f65c6754a719"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.831233393331619"]},"metadata":{},"execution_count":34}],"source":["def IOU(y_true, y_pred):\n","        \"\"\"\n","        y_true: Tensor，真实标签（one-hot类型），\n","        y_pred: Tensor，模型输出结果（one-hot类型），二者shape都为[N,H,W,C]或[N,H*W,C],C为总类别数,\n","        \"\"\"\n","        y_true = y_true.reshape(1,-1) # 求argmax后，展平为一维\n","        y_pred = y_pred.reshape(1,-1)\n","        intersection = np.sum(np.multiply(y_true.astype('bool'),y_pred == 1))\n","        union = np.sum((y_true.astype('bool')+y_pred.astype('bool'))>0) \n","        return intersection/union\n","num_classes=2\n","iou=IOU(predicteds,conv_output_samples)\n","iou\n"]},{"cell_type":"code","execution_count":35,"metadata":{"executionInfo":{"elapsed":423455,"status":"ok","timestamp":1662974401883,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"GA_ZJBzNIf9z"},"outputs":[],"source":["iou_sum=0\n","false_count_075=[]\n","false_count_060=[]\n","false_count_090=[]\n","false_count_nb=[]\n","for i in range(0,len(signal_data)):\n","  output_samples=data_contours\n","  # pick 10 indices\n","  idxs = np.array([i])\n","\n","  # prepare test samples as a batch of 10 images\n","  conv_output_samples = np.array(output_samples[idxs])\n","  conv_output_samples = np.reshape(conv_output_samples, (1,img_size,img_size, 1))\n","  test_input_samples=np.array(initial_img)\n","  test_input_samples_img = np.reshape(test_input_samples, (1,img_size,img_size, 1))\n","  test_input_sample_signal=np.array(signal_data[idxs])\n","  # get the encoder ouput\n","  #encoded = convolutional_encoder_model.predict([test_input_samples_img,test_input_sample_signal])\n","\n","  # get a prediction for some values in the dataset\n","  predicted = vae_auto_models.predict([test_input_samples_img,test_input_sample_signal])\n","\n","  # display the samples, encodings and decoded values!\n","  #display_results(test_input_samples,predicted,conv_output_samples, enc_shape=(7,7))\n","  predicteds=np.reshape(predicted,[300,300])\n","  conv_output_samples=np.reshape(conv_output_samples,[300,300])\n","  predicteds=predicteds*255\n","  conv_output_samples=conv_output_samples*255\n","  # display the samples, encodings and decoded values!\n","  #display_results(test_input_samples,predicted,conv_output_samples, enc_shape=(7,7))\n","  predicteds=binary(predicteds,60)\n","  #print(\"the current one is \",i)\n","  conv_output_samples=binary(conv_output_samples,60)\n","  iou=IOU(predicteds,conv_output_samples)\n","  #print(\"the current img's iou is\",iou)\n","  iou_sum=iou_sum+iou\n","  if(iou>0.90):false_count_nb.append(i)\n","  if(iou<0.75 and iou>0.6):false_count_075.append(i)\n","  if(iou<0.90 and iou>0.75):false_count_090.append(i)\n","  if(iou<0.60):false_count_060.append(i)\n","miou=iou_sum/len(signal_data)"]},{"cell_type":"code","execution_count":37,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":566,"status":"ok","timestamp":1662975124941,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"QXVpffgRIgDx","outputId":"5d7b5ae1-fb59-40af-f6ca-018b167f80a3"},"outputs":[{"output_type":"stream","name":"stdout","text":["the performance too bad at,below 60\n","611\n","the mean of iou is  0.8882401081429543\n","the num that NB is  474\n","the num that can't meet the 90 demand is  507\n","the num that can't meet the 75 demand is  0\n","the num that can't meet the 60 demand is  1\n"]}],"source":["print(\"the performance too bad at,below 60\")\n","for idx in false_count_060:\n","  print(idx)\n","\n","\n","print(\"the mean of iou is \",miou)\n","print(\"the num that NB is \",len(false_count_nb))\n","print(\"the num that can't meet the 90 demand is \",len(false_count_090))\n","print(\"the num that can't meet the 75 demand is \",len(false_count_075))\n","print(\"the num that can't meet the 60 demand is \",len(false_count_060))\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":577,"status":"ok","timestamp":1661690072775,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"lI4e5DjYcEoh","outputId":"04525243-e29c-4d2c-8a16-076b69e8e75c"},"outputs":[{"name":"stdout","output_type":"stream","text":["the performance too bad at,below 75\n","58\n","59\n","71\n","72\n","122\n","206\n","262\n","393\n","419\n"]}],"source":["print(\"the performance too bad at,below 75\")\n","for idx in false_count_075:\n","  print(idx)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"f6tSsqMvcUCe"},"outputs":[],"source":["print(\"the performance too bad at,below 90\")\n","for idx in false_count_090:\n","  print(idx)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"84rKqXtfcqUB"},"outputs":[],"source":["print(\"the performance too bad at, NB\")\n","for idx in false_count_nb:\n","  print(idx)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":234},"executionInfo":{"elapsed":1510,"status":"ok","timestamp":1661480462007,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"7CrgF65f6eam","outputId":"0122103f-a5e2-4622-f338-d5536415696a"},"outputs":[{"data":{"text/plain":["Text(0.5, 1.0, 'initial_img')"]},"execution_count":78,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["def display_one_row(disp_images, offset, shape=(img_size, img_size)):\n","  '''Display sample outputs in one row.'''\n","  for idx, test_image in enumerate(disp_images):\n","    plt.subplot(3, 10, offset + idx + 1)\n","    plt.xticks([])\n","    plt.yticks([])\n","    test_image = np.reshape(test_image, shape)\n","    plt.imshow(test_image, cmap='gray')\n","\n","\n","def display_results(disp_input_images, disp_predicted,disp_expect, enc_shape=(8,4)):\n","  '''Displays the input, encoded, and decoded output values.'''\n","  plt.figure(figsize=(15, 5))\n","  display_one_row(disp_input_images, 0, shape=(img_size,img_size,))\n","  #display_one_row(disp_encoded, 10, shape=enc_shape)\n","  display_one_row(disp_expect, 10, shape=(img_size,img_size,))\n","  display_one_row(disp_predicted, 20, shape=(img_size,img_size,))\n","# take 1 batch of the dataset\n","#test_dataset = test_dataset.take(1)\n","\n","# take the input images and put them in a list\n","# output_samples = []\n","# for input_image in tfds.as_numpy(X_test):\n","#       output_samples = input_image\n","output_samples=X_test\n","# pick 10 indices\n","idxs = np.array([56])\n","\n","# prepare test samples as a batch of 10 images\n","conv_output_samples = np.array(output_samples[idxs])\n","conv_output_samples = np.reshape(conv_output_samples, (1,img_size,img_size, 1))\n","test_input_samples=np.array(X_test_initial[idxs])\n","test_input_samples_img = np.reshape(test_input_samples, (1,img_size,img_size, 1))\n","test_input_sample_signal=np.array(y_test[idxs])\n","# get the encoder ouput\n","#encoded = convolutional_encoder_model.predict([test_input_samples_img,test_input_sample_signal])\n","\n","# get a prediction for some values in the dataset\n","predicted = vae_auto_models.predict([test_input_samples_img,test_input_sample_signal])\n","\n","# display the samples, encodings and decoded values!\n","#display_results(test_input_samples,predicted,conv_output_samples, enc_shape=(7,7))\n","predicteds=np.reshape(predicted,[300,300])\n","conv_output_samples=np.reshape(conv_output_samples,[300,300])\n","plt.subplot(1,2,1)\n","plt.title('predicted_img',color='blue') \n","plt.imshow(predicteds)\n","plt.subplot(1,2,2)\n","plt.imshow(conv_output_samples)\n","plt.title('initial_img',color='blue') "]},{"cell_type":"markdown","metadata":{"id":"rq03rMR_Gd2O"},"source":["# end effector coord"]},{"cell_type":"code","execution_count":38,"metadata":{"id":"b0eB6-SAAsKe","executionInfo":{"status":"ok","timestamp":1662975156901,"user_tz":-480,"elapsed":595,"user":{"displayName":"秦时","userId":"13785341033606597227"}}},"outputs":[],"source":["def get_rectangle_coord(img):\n","  img=img*255\n","  coord=[]\n","  img= np.array(img, dtype=np.uint8)\n","  # cv2.threshold：参数1是源图片, 参数2是阈值, 参数3是填充色, 参数4是阈值类型\n","  ret, thresh = cv2.threshold(img, 60, 255, cv2.THRESH_BINARY)\n","  black = cv2.cvtColor(np.zeros((img.shape[1], img.shape[0]), dtype=np.uint8), cv2.COLOR_GRAY2BGR)\n","\n","  contours, hier = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)\n","\n","  for cnt in contours:\n","    \n","    if (cv2.contourArea(cnt) < 2000 ):\n","        continue\n","    x, y, w, h = cv2.boundingRect(cnt)\n","    epsilon = 0.01 * cv2.arcLength(cnt,True)\n","    # cv2.approxPolyDP：参数1是轮廓，参数2是epsilon值，表源轮廓与近似多边形的最大差值，参数3是布尔标记，表示多边形是否闭合\n","    approx = cv2.approxPolyDP(cnt,epsilon,True)\n","    hull = cv2.convexHull(cnt) # 获取处理过的轮廓信息\n","    cv2.drawContours(black, [cnt], -1, (0, 255, 0), thickness=-1)\n","    coord.append([x,y])\n","    #cv2.drawContours(black, [approx], -1, (255, 255, 0), 2)\n","    #cv2.drawContours(black, [hull], -1, (0, 0, 255), 2)\n","#     kernel = np.ones(shape=[1,1],dtype=np.uint8)\n","#     black = cv2.erode(black,kernel=kernel)  # 腐蚀操作\n","  return coord,black\n","\n","def coord_loss(cores1,cores2):\n","  loss=0.542*abs(cores1-cores2)\n","  return loss"]},{"cell_type":"code","execution_count":39,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":323},"executionInfo":{"elapsed":15,"status":"ok","timestamp":1662975164504,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"35dVWaiQhRoi","outputId":"b9abb7c6-5e05-47e0-b950-7430cf1a0639"},"outputs":[{"output_type":"stream","name":"stdout","text":["the coordinate of predicted image is \n"," [[14, 62]]\n"]},{"output_type":"execute_result","data":{"text/plain":["<matplotlib.image.AxesImage at 0x7f55225d0290>"]},"metadata":{},"execution_count":39},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["cores3,mask3=get_rectangle_coord(predicteds)\n","print(\"the coordinate of predicted image is \\n\",cores3)\n","plt.imshow(mask3)"]},{"cell_type":"code","execution_count":40,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":323},"executionInfo":{"elapsed":6,"status":"ok","timestamp":1662975165576,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"EmZhrUghovE-","outputId":"d02efb86-e918-4c78-e7ee-2433c68ca52b"},"outputs":[{"output_type":"stream","name":"stdout","text":["the coordinate of predicted image is \n"," [[14 62]]\n","the coordinate of initail image is \n"," [[12 61]]\n","the loss of coordinate is \n"," [[1.084 0.542]]\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 2 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["cores1,mask1=get_rectangle_coord(predicteds)\n","cores2,mask2=get_rectangle_coord(conv_output_samples)\n","cores1=np.array(cores1)\n","cores2=np.array(cores2)\n","loss=coord_loss(cores1,cores2)\n","plt.subplot(1,2,1)\n","plt.title('predicted_img',color='blue') \n","plt.imshow(mask1)\n","plt.subplot(1,2,2)\n","plt.title('initial_img',color='blue') \n","plt.imshow(mask2)\n","\n","print(\"the coordinate of predicted image is \\n\",cores1)\n","print(\"the coordinate of initail image is \\n\",cores2)\n","print(\"the loss of coordinate is \\n\",loss)\n"]},{"cell_type":"code","execution_count":41,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6,"status":"ok","timestamp":1662975166093,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"2iljuzYeYQK_","outputId":"48460624-82e3-43f5-ae73-2ba1fb3cd4f5"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1, 2)"]},"metadata":{},"execution_count":41}],"source":["loss.shape"]},{"cell_type":"code","execution_count":45,"metadata":{"id":"Ck8GRYOBZX2_","executionInfo":{"status":"ok","timestamp":1662975933660,"user_tz":-480,"elapsed":422197,"user":{"displayName":"秦时","userId":"13785341033606597227"}}},"outputs":[],"source":["losses=[]\n","for i in range(0,len(signal_data)):\n","\n","  output_samples=data_contours\n","  # pick 10 indices\n","  idxs = np.array([i])\n","\n","  # prepare test samples as a batch of 10 images\n","  conv_output_samples = np.array(output_samples[idxs])\n","  conv_output_samples = np.reshape(conv_output_samples, (1,img_size,img_size, 1))\n","  test_input_samples=np.array(initial_img[idxs])\n","  test_input_samples_img = np.reshape(test_input_samples, (1,img_size,img_size, 1))\n","  test_input_sample_signal=np.array(signal_data[idxs])\n","  # get the encoder ouput\n","  #encoded = convolutional_encoder_model.predict([test_input_samples_img,test_input_sample_signal])\n","\n","  # get a prediction for some values in the dataset\n","  predicted = vae_auto_models.predict([test_input_samples_img,test_input_sample_signal])\n","\n","  # display the samples, encodings and decoded values!\n","  #display_results(test_input_samples,predicted,conv_output_samples, enc_shape=(7,7))\n","  predicteds=np.reshape(predicted,[300,300])\n","  conv_output_samples=np.reshape(conv_output_samples,[300,300])\n","  predicteds=predicteds*255\n","  conv_output_samples=conv_output_samples*255\n","  # display the samples, encodings and decoded values!\n","  #display_results(test_input_samples,predicted,conv_output_samples, enc_shape=(7,7))\n","  predicteds=binary(predicteds,60)\n","  #print(\"the current one is \",i)\n","  conv_output_samples=binary(conv_output_samples,60)\n","  cores1,mask1=get_rectangle_coord(predicteds)\n","  cores2,mask2=get_rectangle_coord(conv_output_samples)\n","  cores1=np.array(cores1)\n","  cores2=np.array(cores2)\n","  loss=coord_loss(cores1,cores2)\n","  losses.append(loss)\n","  # print(\"the coordinate of predicted image is \\n\",cores1)\n","  # print(\"the coordinate of initail image is \\n\",cores2)\n","  # print(\"the loss of coordinate is \\n\",loss)\n","  # show_loss(loss)"]},{"cell_type":"code","execution_count":46,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":486,"status":"ok","timestamp":1662976082938,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"EBkNsJ39YZ9e","outputId":"5ac1af5f-ea57-4ddd-ff8b-8a0f41defb49"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(982, 2)"]},"metadata":{},"execution_count":46}],"source":["losses=np.array(losses)\n","losses=losses.reshape(982,2)\n","losses.shape"]},{"cell_type":"code","execution_count":47,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4,"status":"ok","timestamp":1662976084953,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"upW-XcxTarxa","outputId":"3fae5312-99ad-4cfd-ef71-ada03901b115"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0.542, 0.542])"]},"metadata":{},"execution_count":47}],"source":["\n","losses[539]"]},{"cell_type":"code","execution_count":48,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3,"status":"ok","timestamp":1662976087369,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"sakPPjcgZ_rW","outputId":"864dd66e-2d2b-4171-caf9-797c8d0a1ac1"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0.46693686, 0.23733198])"]},"metadata":{},"execution_count":48}],"source":["np.mean(losses,axis=0)"]},{"cell_type":"code","execution_count":49,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4,"status":"ok","timestamp":1662976089305,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"-WvSdeKraHXe","outputId":"40a48468-253c-466c-e2d4-f03b91d15718"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([5.42, 5.42])"]},"metadata":{},"execution_count":49}],"source":["np.max(losses,axis=0)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":375,"status":"ok","timestamp":1661481347687,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"-8fr8Roy_lzy","outputId":"a28f4b38-4b8a-4122-f5aa-367c0e41191a"},"outputs":[{"data":{"text/plain":["array([[ 4.878,  2.168],\n","       [ 4.878,  2.168],\n","       [ 5.42 ,  2.71 ],\n","       [ 5.42 ,  2.71 ],\n","       [ 5.962,  2.71 ],\n","       [ 5.962,  2.71 ],\n","       [ 5.962,  2.71 ],\n","       [ 5.962,  2.71 ],\n","       [ 6.504,  2.71 ],\n","       [ 6.504,  2.71 ],\n","       [ 6.504,  2.71 ],\n","       [ 6.504,  2.71 ],\n","       [ 6.504,  3.252],\n","       [ 7.046,  3.252],\n","       [ 7.046,  3.252],\n","       [ 7.046,  3.252],\n","       [ 7.588,  3.252],\n","       [ 7.588,  3.252],\n","       [ 7.588,  3.252],\n","       [ 7.588,  3.252],\n","       [ 7.588,  3.252],\n","       [ 7.588,  3.252],\n","       [ 7.588,  3.794],\n","       [ 7.588,  3.794],\n","       [ 7.588,  3.794],\n","       [ 7.588,  3.794],\n","       [ 7.588,  3.794],\n","       [ 8.672,  3.794],\n","       [ 9.756,  4.336],\n","       [10.298,  4.336],\n","       [10.298,  4.336],\n","       [11.382,  4.336],\n","       [11.382,  4.336],\n","       [12.466,  4.336],\n","       [14.092,  4.336],\n","       [14.092,  4.336],\n","       [14.092,  4.336],\n","       [14.092,  4.336],\n","       [14.092,  4.336],\n","       [14.092,  4.336],\n","       [14.092,  4.336],\n","       [14.092,  4.878],\n","       [14.092,  4.878],\n","       [14.092,  5.42 ],\n","       [14.634,  5.962],\n","       [16.26 , 11.924],\n","       [23.306, 13.008],\n","       [27.1  , 18.97 ],\n","       [28.726, 21.68 ]])"]},"execution_count":94,"metadata":{},"output_type":"execute_result"}],"source":["np.sort(losses,axis=0)[-50:-1]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"iLqaXk98AJyi"},"outputs":[],"source":[]}],"metadata":{"accelerator":"GPU","colab":{"collapsed_sections":["Dsyen2HgVR3c"],"machine_shape":"hm","provenance":[{"file_id":"1e_7Lp5JthiwW1vAOiRQ1Vx4iGGSXRFZ6","timestamp":1661830710970},{"file_id":"1p4jOV1wztEto_vSb8-vysTgSYy-4Vfo4","timestamp":1660039408312},{"file_id":"1OMkR6PxoiSY594sxbQkJbDRbig5LQSXU","timestamp":1658997653805}],"toc_visible":true,"authorship_tag":"ABX9TyN5VgWyUQC72jDLg+U0Crtp"},"gpuClass":"standard","kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}