{"cells":[{"cell_type":"code","source":["!/opt/bin/nvidia-smi\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"p5GfKrwd6izd","executionInfo":{"status":"ok","timestamp":1662167702249,"user_tz":-480,"elapsed":391,"user":{"displayName":"秦时","userId":"13785341033606597227"}},"outputId":"d7e2a77e-91ce-4b0a-f955-7d1cc2d3afcc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Sat Sep  3 01:15:01 2022       \n","+-----------------------------------------------------------------------------+\n","| NVIDIA-SMI 460.32.03    Driver Version: 460.32.03    CUDA Version: 11.2     |\n","|-------------------------------+----------------------+----------------------+\n","| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n","| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n","|                               |                      |               MIG M. |\n","|===============================+======================+======================|\n","|   0  Tesla P100-PCIE...  Off  | 00000000:00:04.0 Off |                    0 |\n","| N/A   45C    P0    27W / 250W |      0MiB / 16280MiB |      0%      Default |\n","|                               |                      |                  N/A |\n","+-------------------------------+----------------------+----------------------+\n","                                                                               \n","+-----------------------------------------------------------------------------+\n","| Processes:                                                                  |\n","|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n","|        ID   ID                                                   Usage      |\n","|=============================================================================|\n","|  No running processes found                                                 |\n","+-----------------------------------------------------------------------------+\n"]}]},{"cell_type":"code","execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3807,"status":"ok","timestamp":1662902011155,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"VFoTWnzu61va","outputId":"42d46fb2-62fc-43e0-ac0b-81248ffedb0f"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')\n"]},{"cell_type":"code","execution_count":7,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2953,"status":"ok","timestamp":1662902014104,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"-oG0kZv9si8R","outputId":"497f535d-e52c-474d-f140-5ea18734bb23"},"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: graphviz in /usr/local/lib/python3.7/dist-packages (0.10.1)\n"]}],"source":["!pip install graphviz"]},{"cell_type":"code","execution_count":8,"metadata":{"executionInfo":{"elapsed":7,"status":"ok","timestamp":1662902014105,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"tuTZmldQspWx"},"outputs":[],"source":["from    keras.utils.vis_utils    import plot_model"]},{"cell_type":"code","execution_count":45,"metadata":{"executionInfo":{"elapsed":3,"status":"ok","timestamp":1662902663348,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"ni5CWTqe-BlK"},"outputs":[],"source":["import tensorflow as tf\n","import tensorflow.keras as keras\n","import tensorflow_datasets as tfds\n","import pandas as pd\n","import os\n","from tensorflow.python.keras.utils.vis_utils import plot_model\n","import torch\n","import torchvision\n","from torch import nn\n","from torch.autograd import Variable\n","from torch.utils.data import DataLoader\n","from torchvision import transforms\n","from torchvision.utils import save_image\n","from torchvision.datasets import MNIST\n","\n","import time\n","from torch.utils.data import DataLoader\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from IPython import display\n","import os\n","import cv2\n","from imutils import paths\n","import cv2\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from tensorflow.keras.models import Model\n","from tensorflow.python.keras.utils.vis_utils import plot_model\n","import torch\n","from torch import nn\n","from tqdm.auto import tqdm\n","from torchvision import transforms\n","from sklearn.model_selection import train_test_split"]},{"cell_type":"code","execution_count":10,"metadata":{"executionInfo":{"elapsed":7,"status":"ok","timestamp":1662902014106,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"SuW_0t8KjNxx"},"outputs":[],"source":[" tf.config.run_functions_eagerly(True)\n","#tf.config.experimental_run_functions_eagerly(True)"]},{"cell_type":"code","execution_count":11,"metadata":{"executionInfo":{"elapsed":7,"status":"ok","timestamp":1662902014106,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"thRQsPxB-N1o"},"outputs":[],"source":["def plot_results(images, n_cols=None):\n","    '''visualizes fake images'''\n","    display.clear_output(wait=False)  \n","\n","    n_cols = n_cols or len(images)\n","    n_rows = (len(images) - 1) // n_cols + 1\n","\n","    if images.shape[-1] == 1:\n","        images = np.squeeze(images, axis=-1)\n","\n","    plt.figure(figsize=(n_cols, n_rows))\n","    \n","    for index, image in enumerate(images):\n","        plt.subplot(n_rows, n_cols, index + 1)\n","        plt.imshow(image, cmap=\"binary\")\n","        plt.axis(\"off\")"]},{"cell_type":"markdown","metadata":{"id":"Lv-Hi7jy_RQK"},"source":["# 载入数据"]},{"cell_type":"code","execution_count":12,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6683,"status":"ok","timestamp":1662902020783,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"7ihJ_NuF-ToG","outputId":"700442d9-ff24-418f-c41d-1255bc1d15d2"},"outputs":[{"output_type":"stream","name":"stdout","text":["[INFO] 开始读取数据\n"]}],"source":["img_path = '/content/drive/MyDrive/Colab Notebooks/fianl_project/dataset/contours3/'\n","print(\"[INFO] 开始读取数据\")\n","data_contour = []\n","\n","img_list=os.listdir(img_path)\n","img_list.sort()\n","img_list.sort(key = lambda x: int(x[:-4])) ##文件名按数字排序\n","img_nums=len(img_list)\n","sorted_list=[]\n","for i in range(img_nums):\n","    img_name=img_path+img_list[i]\n","    sorted_list.append(img_name)\n","    #print(img_name)\n","\n","\n"]},{"cell_type":"code","execution_count":13,"metadata":{"executionInfo":{"elapsed":802,"status":"ok","timestamp":1662902021581,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"ewmZyZlW-nDo"},"outputs":[],"source":["def map_image(image, label):\n","  '''Normalizes the image. Returns image as input and label.'''\n","  image = tf.cast(image, dtype=tf.float32)\n","  image = image / 255.0\n","\n","  return image, image"]},{"cell_type":"code","execution_count":14,"metadata":{"executionInfo":{"elapsed":7806,"status":"ok","timestamp":1662902029383,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"l2lpW7CU-rib"},"outputs":[],"source":["# 3 遍历读取数据\n","data_contour = []\n","img_size=300\n","for imagePath in sorted_list:\n","    # 3.1 读取图像数据，由于使用神经网络，需要给定成一维\n","    #print(imagePath)\n","    image = cv2.imread(imagePath,0)   #读取图像\n","    image = np.array(image, dtype=\"float\") / 255.0\n","    #print(image.shape)\n","    image=cv2.resize(image,(img_size,img_size))\n","    data_contour.append(image)   #在data的末尾，追加image数据\n"]},{"cell_type":"code","execution_count":15,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":287},"executionInfo":{"elapsed":16,"status":"ok","timestamp":1662902029383,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"MMDka2OhOANP","outputId":"f38647e7-0bec-4f20-99c0-cbd51569b6eb"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.image.AxesImage at 0x7f58a3675290>"]},"metadata":{},"execution_count":15},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["plt.imshow(data_contour[400])"]},{"cell_type":"code","execution_count":16,"metadata":{"executionInfo":{"elapsed":14,"status":"ok","timestamp":1662902029384,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"GU7A5ZiVUW1v"},"outputs":[],"source":["initial_img=np.expand_dims(np.array(data_contour[400]), axis=0)\n"]},{"cell_type":"code","execution_count":17,"metadata":{"executionInfo":{"elapsed":14,"status":"ok","timestamp":1662902029384,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"VwldIK3-VNqO"},"outputs":[],"source":["\n","initial_img=np.repeat(initial_img,540, axis=0)\n","X_train_initial=initial_img[0:420]\n","X_train_initial.shape\n","X_train_initial=np.reshape(X_train_initial,(-1,img_size,img_size,1))\n","X_test_initial=initial_img[0:120]\n","X_test_initial.shape\n","X_test_initial=np.reshape(X_test_initial,(-1,img_size,img_size,1))"]},{"cell_type":"code","execution_count":18,"metadata":{"executionInfo":{"elapsed":14,"status":"ok","timestamp":1662902029385,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"4AibfaunkfnD"},"outputs":[],"source":["X_train_initial=np.array(X_train_initial)"]},{"cell_type":"markdown","metadata":{"id":"W2YB6-LO53Pb"},"source":[]},{"cell_type":"code","execution_count":19,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":287},"executionInfo":{"elapsed":14,"status":"ok","timestamp":1662902029385,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"3KvnQixRTQdB","outputId":"3b210b6e-05be-42ff-b647-3217b637ec36"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.image.AxesImage at 0x7f58a315bcd0>"]},"metadata":{},"execution_count":19},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["a=np.reshape(X_train_initial[333],(img_size,img_size))\n","plt.imshow(a)"]},{"cell_type":"code","execution_count":20,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":11,"status":"ok","timestamp":1662902029385,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"xInz2cSFW9aW","outputId":"ba7a7d90-a504-4ec2-916f-513c17896a8c"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(120, 300, 300, 1)"]},"metadata":{},"execution_count":20}],"source":["X_test_initial.shape"]},{"cell_type":"code","execution_count":21,"metadata":{"executionInfo":{"elapsed":960,"status":"ok","timestamp":1662902030336,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"73e4K6xIfQuj"},"outputs":[],"source":["\n","data_contours=np.array(data_contour)\n","#data_contours=np.random.shuffle(data_contours)\n"]},{"cell_type":"code","execution_count":22,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":9,"status":"ok","timestamp":1662902030337,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"VqZLfbng-xkW","outputId":"a2382c37-a22d-4429-b3b9-1210e23991f4"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(540, 3)"]},"metadata":{},"execution_count":22}],"source":["signal=pd.read_csv(\"/content/drive/MyDrive/Colab Notebooks/fianl_project/dataset/markersensortrail1all.csv\")\n","#signal.head(5)\n","signal=np.array(signal)\n","signal=signal[360:,1:]\n","signal=signal-signal[400,:]\n","signal.shape"]},{"cell_type":"code","execution_count":23,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":8,"status":"ok","timestamp":1662902030337,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"QRKGzYLCGV16","outputId":"5f42496d-7dab-4a16-bc68-a22a1d38250e"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0.82396285, 0.99825838, 0.82246684],\n","       [0.82454338, 0.99754388, 0.8210155 ],\n","       [0.82246684, 0.99790113, 0.81431697],\n","       [0.75331577, 0.96074666, 0.82525789],\n","       [0.82353861, 0.99732059, 0.82347162]])"]},"metadata":{},"execution_count":23}],"source":["def normalization(data):\n","    range = np.max(data) - np.min(data)\n","    return (data - np.min(data)) / range\n","signal_data=normalization(signal)\n","signal_data[0:5,]"]},{"cell_type":"code","execution_count":24,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6,"status":"ok","timestamp":1662902030338,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"WVkcxWM80qcK","outputId":"0b34740a-e864-47e6-9d56-f2be6a0ad88c"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([2.9896, 3.7712, 2.9886])"]},"metadata":{},"execution_count":24}],"source":["signal.max(axis=0)"]},{"cell_type":"code","execution_count":25,"metadata":{"executionInfo":{"elapsed":827,"status":"ok","timestamp":1662902031161,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"aq99zo6DTAMe"},"outputs":[],"source":["X_train, X_test, y_train, y_test = train_test_split(data_contours, signal_data, test_size=0.221, random_state=42)\n"]},{"cell_type":"code","execution_count":26,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":10,"status":"ok","timestamp":1662902031161,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"x3RezkkJSxrE","outputId":"32601994-19a7-42e0-eec1-0b5ead0d72d9"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(420, 300, 300)"]},"metadata":{},"execution_count":26}],"source":["X_train.shape"]},{"cell_type":"code","execution_count":27,"metadata":{"executionInfo":{"elapsed":9,"status":"ok","timestamp":1662902031162,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"Lkm6RYrbh9xu"},"outputs":[],"source":["X_train=np.reshape(X_train,(-1,img_size,img_size,1))\n","X_test=np.reshape(X_test,(-1,img_size,img_size,1))"]},{"cell_type":"code","execution_count":28,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":9,"status":"ok","timestamp":1662902031162,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"uRhkfKR3ifus","outputId":"3977c7cb-a563-4c3d-cc62-88c1505201cb"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(120, 3)"]},"metadata":{},"execution_count":28}],"source":["y_test.shape"]},{"cell_type":"code","execution_count":29,"metadata":{"executionInfo":{"elapsed":5,"status":"ok","timestamp":1662902031162,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"FbWExNYp3lVS"},"outputs":[],"source":["def generate_and_save_images(model, epoch, step, test_input,img_size):\n","  \"\"\"Helper function to plot our 16 images\n","\n","  Args:\n","\n","  model -- the decoder model\n","  epoch -- current epoch number during training\n","  step -- current step number during training\n","  test_input -- random tensor with shape (16, LATENT_DIM)\n","  \"\"\"\n","  predictions = model.predict(test_input)\n","  predictions=np.array(predictions)\n","\n","  fig = plt.figure(figsize=(6,6))\n","\n","  for i in range(predictions.shape[0]):\n","      plt.subplot(6, 6, i+1)\n","      img = predictions[i, :, :] * 255\n","      img=np.reshape(img,[img_size,img_size])\n","      img = img.astype('int32')\n","      plt.imshow(img)\n","      plt.axis('off')\n","\n","  # tight_layout minimizes the overlap between 2 sub-plots\n","  fig.suptitle(\"epoch: {}, step: {}\".format(epoch, step))\n","  plt.savefig('image_at_epoch_{:04d}_step{:04d}.png'.format(epoch, step))\n","  plt.show()"]},{"cell_type":"markdown","metadata":{"id":"qJsydjZoZZ_M"},"source":["## 构建tensorflow 数据集"]},{"cell_type":"code","execution_count":30,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3935,"status":"ok","timestamp":1662902035093,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"lb2vynw12h56","outputId":"d9fe9c05-66be-4bee-842d-760e9ab483c9"},"outputs":[{"output_type":"stream","name":"stdout","text":["number of batches in the training set: 14\n","number of batches in the validation set: 4\n"]}],"source":["\n","# get the list containing the image paths\n","\n","\n","BATCH_SIZE=30\n","\n","# split the paths list into to training (80%) and validation sets(20%).\n","\n","\n","# load the training image paths into tensors, create batches and shuffle\n","training_dataset1 = tf.data.Dataset.from_tensor_slices((X_train_initial,y_train))\n","training_dataset2 = tf.data.Dataset.from_tensor_slices((X_train))\n","training_datasets = tf.data.Dataset.zip((training_dataset1, training_dataset2))\n","training_dataset = training_datasets.shuffle(1000).batch(BATCH_SIZE)\n","\n","# load the validation image paths into tensors and create batches\n","validation_dataset1 = tf.data.Dataset.from_tensor_slices((X_test_initial,y_test))\n","validation_dataset2 = tf.data.Dataset.from_tensor_slices((X_test))\n","#validation_dataset = validation_dataset.map(map_image)\n","validation_dataset = tf.data.Dataset.zip((validation_dataset1, validation_dataset2))\n","validation_dataset = validation_dataset.batch(BATCH_SIZE)\n","\n","\n","print(f'number of batches in the training set: {len(training_dataset)}')\n","print(f'number of batches in the validation set: {len(validation_dataset)}')"]},{"cell_type":"code","execution_count":31,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":519},"executionInfo":{"elapsed":1533,"status":"ok","timestamp":1662902036622,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"cNC_eN6cK1Hm","outputId":"7a4b4e96-0bd0-46c3-e5b8-970511685bdd"},"outputs":[{"output_type":"stream","name":"stdout","text":["tf.Tensor([300 300   1], shape=(3,), dtype=int32)\n","tf.Tensor([300 300   1], shape=(3,), dtype=int32)\n","tf.Tensor([300 300   1], shape=(3,), dtype=int32)\n","tf.Tensor([300 300   1], shape=(3,), dtype=int32)\n","tf.Tensor([300 300   1], shape=(3,), dtype=int32)\n","tf.Tensor([300 300   1], shape=(3,), dtype=int32)\n","tf.Tensor([300 300   1], shape=(3,), dtype=int32)\n","tf.Tensor([300 300   1], shape=(3,), dtype=int32)\n","tf.Tensor([300 300   1], shape=(3,), dtype=int32)\n","tf.Tensor([300 300   1], shape=(3,), dtype=int32)\n","tf.Tensor([300 300   1], shape=(3,), dtype=int32)\n","tf.Tensor([300 300   1], shape=(3,), dtype=int32)\n","tf.Tensor([300 300   1], shape=(3,), dtype=int32)\n","tf.Tensor([300 300   1], shape=(3,), dtype=int32)\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["for step, x_batch_train in enumerate(training_dataset):\n","  #arr1 = np.array(x_batch_train,dtype=float)\n","  #x_batch_train[1]=tf.convert_to_tensor(x_batch_train[1])\n","  #x_batch_train[1]= tf.reshape(x_batch_train[1],[-1,300,300,1])\n","  a=np.reshape(x_batch_train[1][0],(img_size,img_size))\n","  plt.imshow(a)\n","  print(tf.shape(x_batch_train[1][0]))"]},{"cell_type":"markdown","metadata":{"id":"GJFtbCjt_Uny"},"source":["# 建立模型"]},{"cell_type":"markdown","metadata":{"id":"nbrDPIuU8kS-"},"source":["## 100*100 尝试"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9Z1GdFl3-zlP"},"outputs":[],"source":["class Sampling(tf.keras.layers.Layer):\n","  def call(self, inputs):\n","    \"\"\"Generates a random sample and combines with the encoder output\n","    \n","    Args:\n","      inputs -- output tensor from the encoder\n","\n","    Returns:\n","      `inputs` tensors combined with a random sample\n","    \"\"\"\n","    ### START CODE HERE ###\n","    mu, sigma = inputs\n","    batch = tf.shape(mu)[0]\n","    dim = tf.shape(mu)[1]\n","    epsilon = tf.keras.backend.random_normal(shape=(batch, dim))\n","    z = mu + tf.exp(0.5 * sigma) * epsilon\n","    ### END CODE HERE ###\n","    return  z\n","def kl_reconstruction_loss(inputs, outputs, mu, sigma):\n","  \"\"\" Computes the Kullback-Leibler Divergence (KLD)\n","  Args:\n","    inputs -- batch from the dataset\n","    outputs -- output of the Sampling layer\n","    mu -- mean\n","    sigma -- standard deviation\n","\n","  Returns:\n","    KLD loss\n","  \"\"\"\n","  kl_loss = 1 + sigma - tf.square(mu) - tf.math.exp(sigma)\n","  return tf.reduce_mean(kl_loss) * -0.5"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"tQ3Wx2UrsTlA"},"outputs":[],"source":["def encoder_layers(latent_dim,input_img,input_signal):\n","  input_img=tf.keras.layers.GaussianNoise(0.1)(input_img)\n","  '''Defines the encoder with two Conv2D and max pooling layers.'''\n","  conv_1 = tf.keras.layers.Conv2D(filters=64, kernel_size=(5,5), activation='relu', padding='same',strides=2)(input_img)\n","  max_pool_1 = tf.keras.layers.MaxPooling2D(pool_size=(2,2))(conv_1)\n","\n","  conv_2 = tf.keras.layers.Conv2D(filters=128, kernel_size=(5,5), activation='relu', padding='same',strides=2)(max_pool_1)\n","  max_pool_2 = tf.keras.layers.MaxPooling2D(pool_size=(2,2))(conv_2)\n","\n","  conv_3 = tf.keras.layers.Conv2D(filters=64, kernel_size=(4,4), activation='relu', padding='same',strides=2)(max_pool_2)\n","  max_pool_3 = tf.keras.layers.MaxPooling2D(pool_size=(2,2))(conv_3)\n","\n","  x = tf.keras.layers.Flatten(name=\"encode_flatten\")(max_pool_3)\n","  input_siganl=tf.keras.layers.Flatten()(input_signal)\n","  input_dense = tf.keras.layers.Dense(100, name='signal_dense1')(input_siganl)\n","  x=tf.concat([x,input_dense],1)\n","  x = tf.keras.layers.Dense(1000, activation='relu', name=\"encode_dense\")(x)\n","  x = tf.keras.layers.BatchNormalization()(x)\n","  mu = tf.keras.layers.Dense(latent_dim, name='latent_mu')(x)\n","  mu = tf.keras.layers.BatchNormalization()(mu)\n","  sigma = tf.keras.layers.Dense(latent_dim, name ='latent_sigma')(x)\n","  sigma = tf.keras.layers.BatchNormalization()(sigma)\n","\n","  return mu, sigma, x.shape"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Csfoc4LMsYQD"},"outputs":[],"source":["def decoder_layers(input1,input2):\n","  '''Defines the decoder path to upsample back to the original image size.'''\n","  #units = conv_shape[1] * conv_shape[2] * conv_shape[3]\n","  x1 = tf.keras.layers.Dense(4000, activation = 'relu', name=\"decode_dense1\")(input1)\n","  x1 = tf.keras.layers.BatchNormalization()(x1)\n","  input2=tf.keras.layers.GaussianNoise(0.1)(input2)\n","  x2 = tf.keras.layers.Dense(1000, name='signal_dense2')(input2)\n","  x=tf.concat([x1,x2],1)\n","  x = tf.keras.layers.Dense(2000, name='signal_dense3')(x)\n","  x = tf.keras.layers.BatchNormalization()(x)\n","  x = tf.keras.layers.Reshape([10,10,20], name=\"decode_reshape\")(x)\n","  x = tf.keras.layers.Conv2DTranspose(filters=128, kernel_size=3, strides=2, padding='same', activation='relu', name=\"decode_conv2d_1\")(x)\n","  x = tf.keras.layers.BatchNormalization()(x)\n","  \n","  x = tf.keras.layers.Conv2DTranspose(filters=64, kernel_size=3, strides=2, padding='same', activation='relu', name=\"decode_conv2d_12\")(x)\n","  x = tf.keras.layers.BatchNormalization()(x)\n","  \n","  x = tf.keras.layers.Conv2DTranspose(filters=32, kernel_size=3, strides=2, padding='same', activation='relu', name=\"decode_conv2d_2\")(x)\n","  x = tf.keras.layers.BatchNormalization()(x)\n","\n","  x = tf.keras.layers.Conv2DTranspose(filters=8, kernel_size=3, strides=1, padding='same', activation='relu', name=\"decode_conv2d_3\")(x)\n","  x = tf.keras.layers.BatchNormalization()(x)\n","\n","  x = tf.keras.layers.Conv2DTranspose(filters=1, kernel_size=3, strides=1, padding='same', activation='sigmoid', name=\"decode_final\")(x)\n","\n","\n","  return x"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"UL2AsSsMsdLA"},"outputs":[],"source":["def vae_models():\n","  latent_dim=512\n","  inputs1 = tf.keras.layers.Input(shape=(80, 80, 1,))\n","  inputs2= tf.keras.layers.Input(shape=(3))\n","  mu, sigma, x_shape=encoder_layers(latent_dim,inputs1,inputs2)\n","  z = Sampling()((mu, sigma))\n","  decoder_output=decoder_layers(z,inputs2)\n","  model = tf.keras.Model(inputs =[inputs1,inputs2], outputs=decoder_output)\n","  loss = kl_reconstruction_loss(inputs1, z, mu, sigma)\n","  model.add_loss(loss)\n","  return model\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":507,"status":"ok","timestamp":1660037549160,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"hTL2mDh3sjXK","outputId":"56f8a6cd-2582-4a61-b3d8-ab0e6410034c"},"outputs":[{"name":"stdout","output_type":"stream","text":["Model: \"model_5\"\n","__________________________________________________________________________________________________\n"," Layer (type)                   Output Shape         Param #     Connected to                     \n","==================================================================================================\n"," input_11 (InputLayer)          [(None, 80, 80, 1)]  0           []                               \n","                                                                                                  \n"," gaussian_noise_10 (GaussianNoi  (None, 80, 80, 1)   0           ['input_11[0][0]']               \n"," se)                                                                                              \n","                                                                                                  \n"," conv2d_15 (Conv2D)             (None, 40, 40, 64)   1664        ['gaussian_noise_10[0][0]']      \n","                                                                                                  \n"," max_pooling2d_15 (MaxPooling2D  (None, 20, 20, 64)  0           ['conv2d_15[0][0]']              \n"," )                                                                                                \n","                                                                                                  \n"," conv2d_16 (Conv2D)             (None, 10, 10, 128)  204928      ['max_pooling2d_15[0][0]']       \n","                                                                                                  \n"," max_pooling2d_16 (MaxPooling2D  (None, 5, 5, 128)   0           ['conv2d_16[0][0]']              \n"," )                                                                                                \n","                                                                                                  \n"," conv2d_17 (Conv2D)             (None, 3, 3, 64)     131136      ['max_pooling2d_16[0][0]']       \n","                                                                                                  \n"," input_12 (InputLayer)          [(None, 3)]          0           []                               \n","                                                                                                  \n"," max_pooling2d_17 (MaxPooling2D  (None, 1, 1, 64)    0           ['conv2d_17[0][0]']              \n"," )                                                                                                \n","                                                                                                  \n"," flatten_5 (Flatten)            (None, 3)            0           ['input_12[0][0]']               \n","                                                                                                  \n"," encode_flatten (Flatten)       (None, 64)           0           ['max_pooling2d_17[0][0]']       \n","                                                                                                  \n"," signal_dense1 (Dense)          (None, 100)          400         ['flatten_5[0][0]']              \n","                                                                                                  \n"," tf.concat_10 (TFOpLambda)      (None, 164)          0           ['encode_flatten[0][0]',         \n","                                                                  'signal_dense1[0][0]']          \n","                                                                                                  \n"," encode_dense (Dense)           (None, 1000)         165000      ['tf.concat_10[0][0]']           \n","                                                                                                  \n"," batch_normalization_35 (BatchN  (None, 1000)        4000        ['encode_dense[0][0]']           \n"," ormalization)                                                                                    \n","                                                                                                  \n"," latent_mu (Dense)              (None, 512)          512512      ['batch_normalization_35[0][0]'] \n","                                                                                                  \n"," latent_sigma (Dense)           (None, 512)          512512      ['batch_normalization_35[0][0]'] \n","                                                                                                  \n"," sampling_5 (Sampling)          (None, 512)          0           ['latent_mu[0][0]',              \n","                                                                  'latent_sigma[0][0]']           \n","                                                                                                  \n"," decode_dense1 (Dense)          (None, 4000)         2052000     ['sampling_5[0][0]']             \n","                                                                                                  \n"," gaussian_noise_11 (GaussianNoi  (None, 3)           0           ['input_12[0][0]']               \n"," se)                                                                                              \n","                                                                                                  \n"," batch_normalization_36 (BatchN  (None, 4000)        16000       ['decode_dense1[0][0]']          \n"," ormalization)                                                                                    \n","                                                                                                  \n"," signal_dense2 (Dense)          (None, 1000)         4000        ['gaussian_noise_11[0][0]']      \n","                                                                                                  \n"," tf.concat_11 (TFOpLambda)      (None, 5000)         0           ['batch_normalization_36[0][0]', \n","                                                                  'signal_dense2[0][0]']          \n","                                                                                                  \n"," signal_dense3 (Dense)          (None, 2000)         10002000    ['tf.concat_11[0][0]']           \n","                                                                                                  \n"," batch_normalization_37 (BatchN  (None, 2000)        8000        ['signal_dense3[0][0]']          \n"," ormalization)                                                                                    \n","                                                                                                  \n"," decode_reshape (Reshape)       (None, 10, 10, 20)   0           ['batch_normalization_37[0][0]'] \n","                                                                                                  \n"," decode_conv2d_1 (Conv2DTranspo  (None, 20, 20, 128)  23168      ['decode_reshape[0][0]']         \n"," se)                                                                                              \n","                                                                                                  \n"," batch_normalization_38 (BatchN  (None, 20, 20, 128)  512        ['decode_conv2d_1[0][0]']        \n"," ormalization)                                                                                    \n","                                                                                                  \n"," decode_conv2d_12 (Conv2DTransp  (None, 40, 40, 64)  73792       ['batch_normalization_38[0][0]'] \n"," ose)                                                                                             \n","                                                                                                  \n"," batch_normalization_39 (BatchN  (None, 40, 40, 64)  256         ['decode_conv2d_12[0][0]']       \n"," ormalization)                                                                                    \n","                                                                                                  \n"," decode_conv2d_2 (Conv2DTranspo  (None, 80, 80, 32)  18464       ['batch_normalization_39[0][0]'] \n"," se)                                                                                              \n","                                                                                                  \n"," batch_normalization_40 (BatchN  (None, 80, 80, 32)  128         ['decode_conv2d_2[0][0]']        \n"," ormalization)                                                                                    \n","                                                                                                  \n"," decode_conv2d_3 (Conv2DTranspo  (None, 80, 80, 8)   2312        ['batch_normalization_40[0][0]'] \n"," se)                                                                                              \n","                                                                                                  \n"," batch_normalization_41 (BatchN  (None, 80, 80, 8)   32          ['decode_conv2d_3[0][0]']        \n"," ormalization)                                                                                    \n","                                                                                                  \n"," decode_final (Conv2DTranspose)  (None, 80, 80, 1)   73          ['batch_normalization_41[0][0]'] \n","                                                                                                  \n"," tf.__operators__.add_5 (TFOpLa  (None, 512)         0           ['latent_sigma[0][0]']           \n"," mbda)                                                                                            \n","                                                                                                  \n"," tf.math.square_5 (TFOpLambda)  (None, 512)          0           ['latent_mu[0][0]']              \n","                                                                                                  \n"," tf.math.subtract_10 (TFOpLambd  (None, 512)         0           ['tf.__operators__.add_5[0][0]', \n"," a)                                                               'tf.math.square_5[0][0]']       \n","                                                                                                  \n"," tf.math.exp_5 (TFOpLambda)     (None, 512)          0           ['latent_sigma[0][0]']           \n","                                                                                                  \n"," tf.math.subtract_11 (TFOpLambd  (None, 512)         0           ['tf.math.subtract_10[0][0]',    \n"," a)                                                               'tf.math.exp_5[0][0]']          \n","                                                                                                  \n"," tf.math.reduce_mean_5 (TFOpLam  ()                  0           ['tf.math.subtract_11[0][0]']    \n"," bda)                                                                                             \n","                                                                                                  \n"," tf.math.multiply_5 (TFOpLambda  ()                  0           ['tf.math.reduce_mean_5[0][0]']  \n"," )                                                                                                \n","                                                                                                  \n"," add_loss_5 (AddLoss)           ()                   0           ['tf.math.multiply_5[0][0]']     \n","                                                                                                  \n","==================================================================================================\n","Total params: 13,732,889\n","Trainable params: 13,718,425\n","Non-trainable params: 14,464\n","__________________________________________________________________________________________________\n"]}],"source":["vae_auto_models = vae_models()\n","vae_auto_models.summary()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"eBMnkSb4sjbD"},"outputs":[],"source":["optimizer = tf.keras.optimizers.Adam(learning_rate=0.0001)\n","loss_metric = tf.keras.metrics.Mean()\n","mse_loss = tf.keras.losses.MeanSquaredError()\n","bce_loss = tf.keras.losses.BinaryCrossentropy()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":316},"executionInfo":{"elapsed":881116,"status":"ok","timestamp":1660038437466,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"E-EO_j_esu7q","outputId":"626707b4-c676-436d-d182-3511887d11e7"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 432x432 with 10 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["Epoch: 199 step: 40 mean loss = 7228.5107\n","Epoch: 199 step: 41 mean loss = 7228.3877\n","Epoch: 199 step: 42 mean loss = 7228.273\n","Epoch: 199 step: 43 mean loss = 7228.329\n","Epoch: 199 step: 44 mean loss = 7228.3\n","Epoch: 199 step: 45 mean loss = 7228.31\n","Epoch: 199 step: 46 mean loss = 7228.213\n","Epoch: 199 step: 47 mean loss = 7228.104\n"]}],"source":["# Training loop. Display generated images each epoch\n","\n","### START CODE HERE ###\n","epochs =200\n","### END CODE HERE ###\n","\n","#random_vector_for_generation = tf.random.normal(shape=[16, LATENT_DIM])\n","#generate_and_save_images(decoder, 0, 0, random_vector_for_generation)\n","\n","for epoch in range(epochs):\n","  print('Start of epoch %d' % (epoch,))\n","\n","  # Iterate over the batches of the dataset.\n","  for step, x_batch_train in enumerate(training_dataset):\n","    with tf.GradientTape() as tape:\n","      ### START CODE HERE ### \n","      reconstructed = vae_auto_models(x_batch_train[0])\n","      # Compute reconstruction loss\n","      flattened_inputs = tf.reshape(x_batch_train[1], shape=[-1])\n","      flattened_outputs = tf.reshape(reconstructed, shape=[-1])\n","      loss = bce_loss(flattened_inputs, flattened_outputs) * 300 * 300 * 1\n","      loss += sum(vae_auto_models.losses) \n","\n","    grads =tape.gradient(loss, vae_auto_models.trainable_weights)\n","    optimizer.apply_gradients(zip(grads, vae_auto_models.trainable_weights))\n","    ### END CODE HERE\n","    \n","    loss_metric(loss)\n","\n","    if step % 10 == 0:\n","      display.clear_output(wait=False)    \n","      generate_and_save_images(vae_auto_models, epoch, step, x_batch_train[0],img_size)\n","    print('Epoch: %s step: %s mean loss = %s' % (epoch, step, loss_metric.result().numpy()))"]},{"cell_type":"code","execution_count":38,"metadata":{"id":"HpYHgCD3s5eN","executionInfo":{"status":"ok","timestamp":1662902402624,"user_tz":-480,"elapsed":962,"user":{"displayName":"秦时","userId":"13785341033606597227"}}},"outputs":[],"source":[" def generate_and_save_images(model, epoch, step, test_input):\n","  \"\"\"Helper function to plot our 16 images\n","\n","  Args:\n","\n","  model -- the decoder model\n","  epoch -- current epoch number during training\n","  step -- current step number during training\n","  test_input -- random tensor with shape (16, LATENT_DIM)\n","  \"\"\"\n","  predictions = model.predict(test_input)\n","  predictions=np.array(predictions)\n","\n","  fig = plt.figure(figsize=(6,6))\n","\n","  for i in range(predictions.shape[0]):\n","      plt.subplot(6, 6, i+1)\n","      img = predictions[i, :, :] * 255\n","      img=np.reshape(img,[300,300])\n","      img = img.astype('int32')\n","      plt.imshow(img)\n","      plt.axis('off')\n","\n","  # tight_layout minimizes the overlap between 2 sub-plots\n","  fig.suptitle(\"epoch: {}, step: {}\".format(epoch, step))\n","  plt.savefig('image_at_epoch_{:04d}_step{:04d}.png'.format(epoch, step))\n","  plt.show()"]},{"cell_type":"code","execution_count":39,"metadata":{"executionInfo":{"elapsed":2,"status":"ok","timestamp":1662902404283,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"ZmhY8YVFQRuG"},"outputs":[],"source":["def display_one_row(disp_images, offset, shape=(img_size, img_size)):\n","  '''Display sample outputs in one row.'''\n","  for idx, test_image in enumerate(disp_images):\n","    plt.subplot(3, 10, offset + idx + 1)\n","    plt.xticks([])\n","    plt.yticks([])\n","    test_image = np.reshape(test_image, shape)\n","    \n","    plt.imshow(test_image, cmap='gray')\n","\n","\n","def display_results(disp_input_images, disp_predicted,disp_expect, enc_shape=(8,4)):\n","  '''Displays the input, encoded, and decoded output values.'''\n","  plt.figure(figsize=(20, 5))\n","  display_one_row(disp_input_images, 0, shape=(img_size,img_size,))\n","  #display_one_row(disp_encoded, 10, shape=enc_shape)\n","  display_one_row(disp_expect, 10, shape=(img_size,img_size,))\n","  display_one_row(disp_predicted, 20, shape=(img_size,img_size,))\n","  "]},{"cell_type":"code","execution_count":59,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":324},"executionInfo":{"elapsed":1667,"status":"ok","timestamp":1662903901983,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"4Xnuq-BBRqd9","outputId":"3461353e-29b1-465e-e161-e5a360541a2a"},"outputs":[{"output_type":"stream","name":"stdout","text":["the programe cost 0.07484269142150879\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1440x360 with 30 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# take 1 batch of the dataset\n","#test_dataset = test_dataset.take(1)\n","\n","# take the input images and put them in a list\n","# output_samples = []\n","# for input_image in tfds.as_numpy(X_test):\n","#       output_samples = input_image\n","output_samples=X_test\n","# pick 10 indices\n","i=10\n","ii=i+10\n","idxs = np.array([1+i, 2+i, 3+i, 4+i, 5+i, 6+i, 7+i, 8+i, 9+i, 10+i])\n","\n","# prepare test samples as a batch of 10 images\n","conv_output_samples = np.array(output_samples[idxs])\n","conv_output_samples = np.reshape(conv_output_samples, (10,img_size,img_size, 1))\n","test_input_samples=np.array(X_test_initial[idxs])\n","test_input_samples_img = np.reshape(test_input_samples, (10,img_size,img_size, 1))\n","test_input_sample_signal=np.array(y_test[idxs])\n","# get the encoder ouput\n","#encoded = convolutional_encoder_model.predict([test_input_samples_img,test_input_sample_signal])\n","\n","# get a prediction for some values in the dataset\n","start=time.time()\n","predicted = vae_auto_models.predict([test_input_samples_img,test_input_sample_signal])\n","end=time.time()\n","print(\"the programe cost\",end-start)\n","# display the samples, encodings and decoded values!\n","display_results(test_input_samples,predicted,conv_output_samples, enc_shape=(7,7))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":297},"executionInfo":{"elapsed":2251,"status":"ok","timestamp":1661353157798,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"Vev_C3YPfYen","outputId":"e4d9b2a3-a485-4e4f-ea5b-dbd85cfc0335"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1080x360 with 30 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# take 1 batch of the dataset\n","#test_dataset = test_dataset.take(1)\n","\n","# take the input images and put them in a list\n","# output_samples = []\n","# for input_image in tfds.as_numpy(X_test):\n","#       output_samples = input_image\n","output_samples=X_train\n","# pick 10 indices\n","i=10\n","idxs = np.array([1+i, 2+i, 3+i, 4+i, 5+i, 6+i, 7+i, 8+i, 9+i, 10+i])\n","\n","# prepare test samples as a batch of 10 images\n","conv_output_samples = np.array(output_samples[idxs])\n","conv_output_samples = np.reshape(conv_output_samples, (10,img_size,img_size, 1))\n","train_input_samples=np.array(X_train_initial[idxs])\n","train_input_samples_img = np.reshape(train_input_samples, (10,img_size,img_size, 1))\n","train_input_sample_signal=np.array(y_train[idxs])\n","# get the encoder ouput\n","#encoded = convolutional_encoder_model.predict([test_input_samples_img,test_input_sample_signal])\n","\n","# get a prediction for some values in the dataset\n","predicted = vae_auto_models.predict([train_input_samples_img,train_input_sample_signal])\n","\n","# display the samples, encodings and decoded values!\n","display_results(train_input_samples,predicted,conv_output_samples, enc_shape=(7,7))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":287},"executionInfo":{"elapsed":4,"status":"ok","timestamp":1659319528780,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"z3kIaspVGBMU","outputId":"013d7a0d-3668-494f-a8b2-490426c91eb4"},"outputs":[{"data":{"text/plain":["<matplotlib.image.AxesImage at 0x7f368a270a10>"]},"execution_count":45,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["plt.imshow(test_input_samples_img[1].reshape(300,300))"]},{"cell_type":"markdown","metadata":{"id":"1o_ny6T8K8kP"},"source":["# 300*300尝试 VAE"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"M5CSgM9CtSS3"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"q58mDj-9xlFO"},"outputs":[],"source":["import tensorflow as tf\n","import tensorflow_datasets as tfds\n","\n","import matplotlib.pyplot as plt\n","import numpy as np\n","\n","import os\n","import zipfile\n","import urllib.request\n","import random\n","from IPython import display\n","\n","# set a random seed\n","np.random.seed(51)\n","\n","# parameters for building the model and training\n","BATCH_SIZE=30\n","LATENT_DIM=1024\n","IMAGE_SIZE=300"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4,"status":"ok","timestamp":1662301539095,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"YgH2xM_kgpyu","outputId":"07d166c6-1df8-4a8e-c7c7-ba4a50005a9b"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(420, 300, 300, 1)"]},"metadata":{},"execution_count":35}],"source":["X_train_initial.shape"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3,"status":"ok","timestamp":1662301540289,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"MZSCj9Zwj3fd","outputId":"4ce16e02-eca1-40a1-e47f-46f94f990c6a"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(420, 300, 300, 1)"]},"metadata":{},"execution_count":36}],"source":["X_train.shape"]},{"cell_type":"markdown","metadata":{"id":"xKfWrkjN-tiA"},"source":["## 数据准备"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"185zpTapliOw"},"outputs":[],"source":[]},{"cell_type":"markdown","metadata":{"id":"BbB_EWey-0Rt"},"source":["# 模型搭建"]},{"cell_type":"code","execution_count":32,"metadata":{"id":"8-ar2xOUtSUA","executionInfo":{"status":"ok","timestamp":1662902054624,"user_tz":-480,"elapsed":517,"user":{"displayName":"秦时","userId":"13785341033606597227"}}},"outputs":[],"source":["\n","def Sampling(mu, sigma):\n","  \"\"\"Generates a random sample and combines with the encoder output\n","  \n","  Args:\n","    inputs -- output tensor from the encoder\n","\n","  Returns:\n","    `inputs` tensors combined with a random sample\n","  \"\"\"\n","  ### START CODE HERE ###\n","  mu, sigma \n","  batch = tf.shape(mu)[0]\n","  dim = tf.shape(mu)[1]\n","  epsilon = tf.keras.backend.random_normal(shape=(batch, dim))\n","  z = mu + tf.exp(0.5 * sigma) * epsilon\n","  ### END CODE HERE ###\n","  return  z"]},{"cell_type":"code","execution_count":33,"metadata":{"id":"u87KnSs31Sro","executionInfo":{"status":"ok","timestamp":1662902055274,"user_tz":-480,"elapsed":2,"user":{"displayName":"秦时","userId":"13785341033606597227"}}},"outputs":[],"source":["def kl_reconstruction_loss(inputs, outputs, mu, sigma):\n","  \"\"\" Computes the Kullback-Leibler Divergence (KLD)\n","  Args:\n","    inputs -- batch from the dataset\n","    outputs -- output of the Sampling layer\n","    mu -- mean\n","    sigma -- standard deviation\n","\n","  Returns:\n","    KLD loss\n","  \"\"\"\n","  kl_loss = 1 + sigma - tf.square(mu) - tf.math.exp(sigma)\n","  return tf.reduce_mean(kl_loss) * -0.5"]},{"cell_type":"code","execution_count":34,"metadata":{"id":"_yLvgLdoLARs","executionInfo":{"status":"ok","timestamp":1662902056330,"user_tz":-480,"elapsed":3,"user":{"displayName":"秦时","userId":"13785341033606597227"}}},"outputs":[],"source":["def encoder_layers(latent_dim,input_img,input_signal):\n","  '''Defines the encoder with two Conv2D and max pooling layers.'''\n","  input_img=tf.keras.layers.GaussianNoise(0.1)(input_img)\n","  conv_1 = tf.keras.layers.Conv2D(filters=4, kernel_size=(5,5), activation='relu', padding='same',strides=2)(input_img)\n","  max_pool_1 = tf.keras.layers.MaxPooling2D(pool_size=(3,3))(conv_1)\n","\n","  conv_2 = tf.keras.layers.Conv2D(filters=8, kernel_size=(5,5), activation='relu', padding='same',strides=2)(max_pool_1)\n","  max_pool_2 = tf.keras.layers.MaxPooling2D(pool_size=(2,2))(conv_2)\n","\n","  conv_3 = tf.keras.layers.Conv2D(filters=32, kernel_size=(4,4), activation='relu', padding='same',strides=2)(max_pool_2)\n","  max_pool_3 = tf.keras.layers.MaxPooling2D(pool_size=(2,2))(conv_3)\n","\n","  x = tf.keras.layers.Flatten(name=\"encode_flatten\")(max_pool_3)\n","  input_siganl=tf.keras.layers.Flatten()(input_signal)\n","  input_siganl=tf.keras.layers.GaussianNoise(0.1)(input_siganl)\n","  input_dense = tf.keras.layers.Dense(100, name='signal_dense1')(input_siganl)\n","  x=tf.concat([x,input_dense],1)\n","  x = tf.keras.layers.Dense(1000, activation='relu', name=\"encode_dense\",kernel_regularizer=keras.regularizers.l1(0.01))(x)\n","  #x = tf.keras.layers.BatchNormalization()(x)\n","  mu = tf.keras.layers.Dense(latent_dim, name='latent_mu')(x)\n","  sigma = tf.keras.layers.Dense(latent_dim, name ='latent_sigma')(x)\n","  cont=conv_2\n","\n","  return mu, sigma, cont"]},{"cell_type":"code","execution_count":35,"metadata":{"id":"Cu3sFkFOLRtR","executionInfo":{"status":"ok","timestamp":1662902056982,"user_tz":-480,"elapsed":2,"user":{"displayName":"秦时","userId":"13785341033606597227"}}},"outputs":[],"source":["def decoder_layers(input1,input2,cont):\n","  '''Defines the decoder path to upsample back to the original image size.'''\n","  #units = conv_shape[1] * conv_shape[2] * conv_shape[3]\n","  x1 = tf.keras.layers.Dense(4000, activation = 'relu', name=\"decode_dense1\")(input1)\n","  x1 = tf.keras.layers.BatchNormalization()(x1)\n","  #input2=tf.keras.layers.GaussianNoise(0.01)(input2)\n","  x2 = tf.keras.layers.Dense(1000, name='signal_dense2')(input2)\n","  x=tf.concat([x1,x2],1)\n","  x = tf.keras.layers.Dense(5000, name='signal_dense3',kernel_regularizer=keras.regularizers.l1(0.01))(x1)\n","  x = tf.keras.layers.BatchNormalization()(x)\n","  x = tf.keras.layers.Reshape([25,25,8], name=\"decode_reshape\")(x)\n","  #x=tf.keras.layers.Add()([x,cont])\n","  conv_1 = tf.keras.layers.Conv2D(filters=64, kernel_size=(4,4), activation='selu', padding='same')(x)\n","  up_sample_1 = tf.keras.layers.UpSampling2D(size=(3,3))(conv_1)\n","\n","  conv_2 = tf.keras.layers.Conv2D(filters=32, kernel_size=(4,4), activation='relu', padding='same')(up_sample_1)\n","  up_sample_2 = tf.keras.layers.UpSampling2D(size=(2,2))(conv_2)\n","\n","  conv_2 = tf.keras.layers.Conv2D(filters=16, kernel_size=(3,3), activation='relu', padding='same')(up_sample_2)\n","  up_sample_3 = tf.keras.layers.UpSampling2D(size=(2,2))(conv_2)\n","\n","  conv_4 = tf.keras.layers.Conv2D(filters=1, kernel_size=(1,1), activation='sigmoid', padding='same')(up_sample_3)\n","\n","  return conv_4"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"H0XDv9fTBfLi"},"outputs":[],"source":["\n","def vae_models():\n","  latent_dim=2500\n","  inputs1 = tf.keras.layers.Input(shape=(300, 300, 1,))\n","  inputs2= tf.keras.layers.Input(shape=(3))\n","  mu, sigma, cont=encoder_layers(latent_dim,inputs1,inputs2)\n","  z = Sampling(mu, sigma)\n","  decoder_output=decoder_layers(z,inputs2,cont)\n","  model = tf.keras.Model(inputs =[inputs1,inputs2], outputs=decoder_output)\n","  loss = kl_reconstruction_loss(inputs1, z, mu, sigma)\n","  model.add_loss(loss)\n","  return model\n","\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":162,"status":"ok","timestamp":1662295193799,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"O_KNUhubGPyn","outputId":"45892220-6159-42b8-fc34-2fa299a07c0c"},"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"model_1\"\n","__________________________________________________________________________________________________\n"," Layer (type)                   Output Shape         Param #     Connected to                     \n","==================================================================================================\n"," input_3 (InputLayer)           [(None, 300, 300, 1  0           []                               \n","                                )]                                                                \n","                                                                                                  \n"," gaussian_noise_2 (GaussianNois  (None, 300, 300, 1)  0          ['input_3[0][0]']                \n"," e)                                                                                               \n","                                                                                                  \n"," conv2d_7 (Conv2D)              (None, 150, 150, 4)  104         ['gaussian_noise_2[0][0]']       \n","                                                                                                  \n"," max_pooling2d_3 (MaxPooling2D)  (None, 50, 50, 4)   0           ['conv2d_7[0][0]']               \n","                                                                                                  \n"," conv2d_8 (Conv2D)              (None, 25, 25, 8)    808         ['max_pooling2d_3[0][0]']        \n","                                                                                                  \n"," max_pooling2d_4 (MaxPooling2D)  (None, 12, 12, 8)   0           ['conv2d_8[0][0]']               \n","                                                                                                  \n"," input_4 (InputLayer)           [(None, 3)]          0           []                               \n","                                                                                                  \n"," conv2d_9 (Conv2D)              (None, 6, 6, 32)     4128        ['max_pooling2d_4[0][0]']        \n","                                                                                                  \n"," flatten_1 (Flatten)            (None, 3)            0           ['input_4[0][0]']                \n","                                                                                                  \n"," max_pooling2d_5 (MaxPooling2D)  (None, 3, 3, 32)    0           ['conv2d_9[0][0]']               \n","                                                                                                  \n"," gaussian_noise_3 (GaussianNois  (None, 3)           0           ['flatten_1[0][0]']              \n"," e)                                                                                               \n","                                                                                                  \n"," encode_flatten (Flatten)       (None, 288)          0           ['max_pooling2d_5[0][0]']        \n","                                                                                                  \n"," signal_dense1 (Dense)          (None, 100)          400         ['gaussian_noise_3[0][0]']       \n","                                                                                                  \n"," tf.concat_2 (TFOpLambda)       (None, 388)          0           ['encode_flatten[0][0]',         \n","                                                                  'signal_dense1[0][0]']          \n","                                                                                                  \n"," encode_dense (Dense)           (None, 1000)         389000      ['tf.concat_2[0][0]']            \n","                                                                                                  \n"," latent_mu (Dense)              (None, 2500)         2502500     ['encode_dense[0][0]']           \n","                                                                                                  \n"," latent_sigma (Dense)           (None, 2500)         2502500     ['encode_dense[0][0]']           \n","                                                                                                  \n"," tf.compat.v1.shape_2 (TFOpLamb  (2,)                0           ['latent_mu[0][0]']              \n"," da)                                                                                              \n","                                                                                                  \n"," tf.compat.v1.shape_3 (TFOpLamb  (2,)                0           ['latent_mu[0][0]']              \n"," da)                                                                                              \n","                                                                                                  \n"," tf.math.multiply_3 (TFOpLambda  (None, 2500)        0           ['latent_sigma[0][0]']           \n"," )                                                                                                \n","                                                                                                  \n"," tf.__operators__.getitem_2 (Sl  ()                  0           ['tf.compat.v1.shape_2[0][0]']   \n"," icingOpLambda)                                                                                   \n","                                                                                                  \n"," tf.__operators__.getitem_3 (Sl  ()                  0           ['tf.compat.v1.shape_3[0][0]']   \n"," icingOpLambda)                                                                                   \n","                                                                                                  \n"," tf.math.exp_2 (TFOpLambda)     (None, 2500)         0           ['tf.math.multiply_3[0][0]']     \n","                                                                                                  \n"," tf.random.normal_1 (TFOpLambda  (None, 2500)        0           ['tf.__operators__.getitem_2[0][0\n"," )                                                               ]',                              \n","                                                                  'tf.__operators__.getitem_3[0][0\n","                                                                 ]']                              \n","                                                                                                  \n"," tf.math.multiply_4 (TFOpLambda  (None, 2500)        0           ['tf.math.exp_2[0][0]',          \n"," )                                                                'tf.random.normal_1[0][0]']     \n","                                                                                                  \n"," tf.__operators__.add_2 (TFOpLa  (None, 2500)        0           ['latent_mu[0][0]',              \n"," mbda)                                                            'tf.math.multiply_4[0][0]']     \n","                                                                                                  \n"," decode_dense1 (Dense)          (None, 4000)         10004000    ['tf.__operators__.add_2[0][0]'] \n","                                                                                                  \n"," batch_normalization_2 (BatchNo  (None, 4000)        16000       ['decode_dense1[0][0]']          \n"," rmalization)                                                                                     \n","                                                                                                  \n"," signal_dense3 (Dense)          (None, 5000)         20005000    ['batch_normalization_2[0][0]']  \n","                                                                                                  \n"," batch_normalization_3 (BatchNo  (None, 5000)        20000       ['signal_dense3[0][0]']          \n"," rmalization)                                                                                     \n","                                                                                                  \n"," decode_reshape (Reshape)       (None, 25, 25, 8)    0           ['batch_normalization_3[0][0]']  \n","                                                                                                  \n"," conv2d_10 (Conv2D)             (None, 25, 25, 64)   8256        ['decode_reshape[0][0]']         \n","                                                                                                  \n"," up_sampling2d_3 (UpSampling2D)  (None, 75, 75, 64)  0           ['conv2d_10[0][0]']              \n","                                                                                                  \n"," conv2d_11 (Conv2D)             (None, 75, 75, 32)   32800       ['up_sampling2d_3[0][0]']        \n","                                                                                                  \n"," up_sampling2d_4 (UpSampling2D)  (None, 150, 150, 32  0          ['conv2d_11[0][0]']              \n","                                )                                                                 \n","                                                                                                  \n"," conv2d_12 (Conv2D)             (None, 150, 150, 16  4624        ['up_sampling2d_4[0][0]']        \n","                                )                                                                 \n","                                                                                                  \n"," up_sampling2d_5 (UpSampling2D)  (None, 300, 300, 16  0          ['conv2d_12[0][0]']              \n","                                )                                                                 \n","                                                                                                  \n"," conv2d_13 (Conv2D)             (None, 300, 300, 1)  17          ['up_sampling2d_5[0][0]']        \n","                                                                                                  \n"," tf.__operators__.add_3 (TFOpLa  (None, 2500)        0           ['latent_sigma[0][0]']           \n"," mbda)                                                                                            \n","                                                                                                  \n"," tf.math.square_1 (TFOpLambda)  (None, 2500)         0           ['latent_mu[0][0]']              \n","                                                                                                  \n"," tf.math.subtract_2 (TFOpLambda  (None, 2500)        0           ['tf.__operators__.add_3[0][0]', \n"," )                                                                'tf.math.square_1[0][0]']       \n","                                                                                                  \n"," tf.math.exp_3 (TFOpLambda)     (None, 2500)         0           ['latent_sigma[0][0]']           \n","                                                                                                  \n"," tf.math.subtract_3 (TFOpLambda  (None, 2500)        0           ['tf.math.subtract_2[0][0]',     \n"," )                                                                'tf.math.exp_3[0][0]']          \n","                                                                                                  \n"," tf.math.reduce_mean_1 (TFOpLam  ()                  0           ['tf.math.subtract_3[0][0]']     \n"," bda)                                                                                             \n","                                                                                                  \n"," tf.math.multiply_5 (TFOpLambda  ()                  0           ['tf.math.reduce_mean_1[0][0]']  \n"," )                                                                                                \n","                                                                                                  \n"," add_loss_1 (AddLoss)           ()                   0           ['tf.math.multiply_5[0][0]']     \n","                                                                                                  \n","==================================================================================================\n","Total params: 35,490,137\n","Trainable params: 35,472,137\n","Non-trainable params: 18,000\n","__________________________________________________________________________________________________\n"]}],"source":["vae_auto_models = vae_models()\n","vae_auto_models.summary()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"LavSmA5F3kz_"},"outputs":[],"source":["\n","\n","\n","optimizer = tf.keras.optimizers.Adam(learning_rate=0.0008)\n","loss_metric = tf.keras.metrics.Mean()\n","mse_loss = tf.keras.losses.MeanSquaredError()\n","bce_loss = tf.keras.losses.BinaryCrossentropy()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XRyxdjbuwRP4"},"outputs":[],"source":["### 感知模型Perceptual Loss\n","def VGGloss(y_true, y_pred):  # Note the parameter order\n","    from keras.applications.vgg16 import VGG16\n","    mod = VGG16(include_top=False, weights='imagenet')\n","    pred = K.concatenate([y_pred, y_pred, y_pred])\n","    true = K.concatenate([y_true, y_true, y_true])\n","    vggmodel = mod \n","    f_p = vggmodel(pred)  \n","    f_t = vggmodel(true)  \n","    return K.mean(K.square(f_p - f_t)) \n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XCNACPjJ0u7Y"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":411},"executionInfo":{"elapsed":356496,"status":"error","timestamp":1662295596094,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"GwHM-kqczve5","outputId":"673c3765-fe86-49eb-a112-7cbea69e833c"},"outputs":[{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-65-9e76cf18fded>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     30\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mstep\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0;36m10\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     31\u001b[0m       \u001b[0mdisplay\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclear_output\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mwait\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 32\u001b[0;31m       \u001b[0mgenerate_and_save_images\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvae_auto_models\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepoch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstep\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx_batch_train\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mimg_size\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     33\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Epoch: %s step: %s mean loss = %s'\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mepoch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstep\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mloss_metric\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnumpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-64-d725d92d6d53>\u001b[0m in \u001b[0;36mgenerate_and_save_images\u001b[0;34m(model, epoch, step, test_input, img_size)\u001b[0m\n\u001b[1;32m     25\u001b[0m   \u001b[0mfig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msuptitle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"epoch: {}, step: {}\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mepoch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstep\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     26\u001b[0m   \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msavefig\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'image_at_epoch_{:04d}_step{:04d}.png'\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mepoch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstep\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 27\u001b[0;31m   \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/pyplot.py\u001b[0m in \u001b[0;36mshow\u001b[0;34m(*args, **kw)\u001b[0m\n\u001b[1;32m    270\u001b[0m     \"\"\"\n\u001b[1;32m    271\u001b[0m     \u001b[0;32mglobal\u001b[0m \u001b[0m_show\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 272\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_show\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    273\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    274\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/ipykernel/pylab/backend_inline.py\u001b[0m in \u001b[0;36mshow\u001b[0;34m(close, block)\u001b[0m\n\u001b[1;32m     41\u001b[0m             display(\n\u001b[1;32m     42\u001b[0m                 \u001b[0mfigure_manager\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcanvas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 43\u001b[0;31m                 \u001b[0mmetadata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0m_fetch_figure_metadata\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfigure_manager\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcanvas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     44\u001b[0m             )\n\u001b[1;32m     45\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/IPython/core/display.py\u001b[0m in \u001b[0;36mdisplay\u001b[0;34m(include, exclude, metadata, transient, display_id, *objs, **kwargs)\u001b[0m\n\u001b[1;32m    311\u001b[0m             \u001b[0mpublish_display_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmetadata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmetadata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    312\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 313\u001b[0;31m             \u001b[0mformat_dict\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmd_dict\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minclude\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minclude\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexclude\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mexclude\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    314\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mformat_dict\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    315\u001b[0m                 \u001b[0;31m# nothing to display (e.g. _ipython_display_ took over)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/IPython/core/formatters.py\u001b[0m in \u001b[0;36mformat\u001b[0;34m(self, obj, include, exclude)\u001b[0m\n\u001b[1;32m    178\u001b[0m             \u001b[0mmd\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    179\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 180\u001b[0;31m                 \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mformatter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    181\u001b[0m             \u001b[0;32mexcept\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    182\u001b[0m                 \u001b[0;31m# FIXME: log the exception\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<decorator-gen-2>\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, obj)\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/IPython/core/formatters.py\u001b[0m in \u001b[0;36mcatch_format_error\u001b[0;34m(method, self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    222\u001b[0m     \u001b[0;34m\"\"\"show traceback on failed format call\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    223\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 224\u001b[0;31m         \u001b[0mr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    225\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mNotImplementedError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    226\u001b[0m         \u001b[0;31m# don't warn on NotImplementedErrors\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/IPython/core/formatters.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, obj)\u001b[0m\n\u001b[1;32m    339\u001b[0m                 \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    340\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 341\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mprinter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    342\u001b[0m             \u001b[0;31m# Finally look for special method names\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    343\u001b[0m             \u001b[0mmethod\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_real_method\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprint_method\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/IPython/core/pylabtools.py\u001b[0m in \u001b[0;36m<lambda>\u001b[0;34m(fig)\u001b[0m\n\u001b[1;32m    242\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    243\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;34m'png'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mformats\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 244\u001b[0;31m         \u001b[0mpng_formatter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfor_type\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mFigure\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mlambda\u001b[0m \u001b[0mfig\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mprint_figure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'png'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    245\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;34m'retina'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mformats\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;34m'png2x'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mformats\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    246\u001b[0m         \u001b[0mpng_formatter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfor_type\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mFigure\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mlambda\u001b[0m \u001b[0mfig\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mretina_figure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/IPython/core/pylabtools.py\u001b[0m in \u001b[0;36mprint_figure\u001b[0;34m(fig, fmt, bbox_inches, **kwargs)\u001b[0m\n\u001b[1;32m    126\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    127\u001b[0m     \u001b[0mbytes_io\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mBytesIO\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 128\u001b[0;31m     \u001b[0mfig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcanvas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprint_figure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbytes_io\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    129\u001b[0m     \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbytes_io\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetvalue\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    130\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mfmt\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'svg'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/backend_bases.py\u001b[0m in \u001b[0;36mprint_figure\u001b[0;34m(self, filename, dpi, facecolor, edgecolor, orientation, format, bbox_inches, **kwargs)\u001b[0m\n\u001b[1;32m   2101\u001b[0m                     \u001b[0mbbox_artists\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"bbox_extra_artists\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2102\u001b[0m                     bbox_inches = self.figure.get_tightbbox(renderer,\n\u001b[0;32m-> 2103\u001b[0;31m                             bbox_extra_artists=bbox_artists)\n\u001b[0m\u001b[1;32m   2104\u001b[0m                     \u001b[0mpad\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"pad_inches\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2105\u001b[0m                     \u001b[0;32mif\u001b[0m \u001b[0mpad\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/figure.py\u001b[0m in \u001b[0;36mget_tightbbox\u001b[0;34m(self, renderer, bbox_extra_artists)\u001b[0m\n\u001b[1;32m   2383\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2384\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0ma\u001b[0m \u001b[0;32min\u001b[0m \u001b[0martists\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2385\u001b[0;31m             \u001b[0mbbox\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0ma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_tightbbox\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2386\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mbbox\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mbbox\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwidth\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;36m0\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mbbox\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mheight\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2387\u001b[0m                 \u001b[0mbb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbbox\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36mget_tightbbox\u001b[0;34m(self, renderer)\u001b[0m\n\u001b[1;32m    280\u001b[0m             \u001b[0mThe\u001b[0m \u001b[0menclosing\u001b[0m \u001b[0mbounding\u001b[0m \u001b[0mbox\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;32min\u001b[0m \u001b[0mfigure\u001b[0m \u001b[0mpixel\u001b[0m \u001b[0mco\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0mordinates\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    281\u001b[0m         \"\"\"\n\u001b[0;32m--> 282\u001b[0;31m         \u001b[0mbbox\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_window_extent\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    283\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_clip_on\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    284\u001b[0m             \u001b[0mclip_box\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_clip_box\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/text.py\u001b[0m in \u001b[0;36mget_window_extent\u001b[0;34m(self, renderer, dpi)\u001b[0m\n\u001b[1;32m    893\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdpi\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdpi\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    894\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_text\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m''\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 895\u001b[0;31m             \u001b[0mtx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mty\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_xy_display\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    896\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mBbox\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfrom_bounds\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mty\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    897\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/text.py\u001b[0m in \u001b[0;36m_get_xy_display\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    226\u001b[0m         \"\"\"\n\u001b[1;32m    227\u001b[0m         \u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_unitless_position\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 228\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_transform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    229\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    230\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_get_multialignment\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/transforms.py\u001b[0m in \u001b[0;36mtransform\u001b[0;34m(self, values)\u001b[0m\n\u001b[1;32m   1403\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1404\u001b[0m         \u001b[0;31m# Transform the values\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1405\u001b[0;31m         \u001b[0mres\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform_affine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform_non_affine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1406\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1407\u001b[0m         \u001b[0;31m# Convert the result back to the shape of the input values.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/transforms.py\u001b[0m in \u001b[0;36mtransform_affine\u001b[0;34m(self, points)\u001b[0m\n\u001b[1;32m   2363\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mtransform_affine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpoints\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2364\u001b[0m         \u001b[0;31m# docstring inherited\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2365\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_affine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpoints\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2366\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2367\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mtransform_non_affine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpoints\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/transforms.py\u001b[0m in \u001b[0;36mtransform\u001b[0;34m(self, values)\u001b[0m\n\u001b[1;32m   1714\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mtransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalues\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1715\u001b[0m         \u001b[0;31m# docstring inherited\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1716\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform_affine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1717\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1718\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mtransform_affine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalues\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/transforms.py\u001b[0m in \u001b[0;36mtransform_affine\u001b[0;34m(self, points)\u001b[0m\n\u001b[1;32m   1796\u001b[0m             \u001b[0mtpoints\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maffine_transform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpoints\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmtx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1797\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mMaskedArray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtpoints\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmask\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetmask\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpoints\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1798\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0maffine_transform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpoints\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmtx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1799\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1800\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mDEBUG\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}],"source":["# Training loop. Display generated images each epoch\n","\n","### START CODE HERE ###\n","epochs =500\n","### END CODE HERE ###\n","\n","#random_vector_for_generation = tf.random.normal(shape=[16, LATENT_DIM])\n","#generate_and_save_images(decoder, 0, 0, random_vector_for_generation)\n","\n","for epoch in range(epochs):\n","  print('Start of epoch %d' % (epoch,))\n","\n","  # Iterate over the batches of the dataset.\n","  for step, x_batch_train in enumerate(training_dataset):\n","    with tf.GradientTape() as tape:\n","      ### START CODE HERE ### \n","      reconstructed = vae_auto_models(x_batch_train[0])\n","      # Compute reconstruction loss\n","      flattened_inputs = tf.reshape(x_batch_train[1], shape=[-1])\n","      flattened_outputs = tf.reshape(reconstructed, shape=[-1])\n","      loss = bce_loss(flattened_inputs, flattened_outputs) * 300 * 300 * 1\n","      loss += sum(vae_auto_models.losses) \n","\n","    grads =tape.gradient(loss, vae_auto_models.trainable_weights)\n","    optimizer.apply_gradients(zip(grads, vae_auto_models.trainable_weights))\n","    ### END CODE HERE\n","    \n","    loss_metric(loss)\n","\n","    if step % 10 == 0:\n","      display.clear_output(wait=False)    \n","      generate_and_save_images(vae_auto_models, epoch, step, x_batch_train[0],img_size)\n","    print('Epoch: %s step: %s mean loss = %s' % (epoch, step, loss_metric.result().numpy()))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"S5DNd73OqS1R"},"outputs":[],"source":[" def display_faces(dataset, size=9):\n","  '''Takes a sample from a dataset batch and plots it in a grid.'''\n","  dataset = dataset.unbatch().take(size)\n","  n_cols = 3\n","  n_rows = size//n_cols + 1\n","  plt.figure(figsize=(5, 5))\n","  i = 0\n","  for image in dataset:\n","    i += 1\n","    disp_img = np.reshape(image, (64,64,3))\n","    plt.subplot(n_rows, n_cols, i)\n","    plt.xticks([])\n","    plt.yticks([])\n","    plt.imshow(disp_img)\n","\n","\n","def display_one_row(disp_images, offset, shape=(28, 28)):\n","  '''Displays a row of images.'''\n","  for idx, image in enumerate(disp_images):\n","    plt.subplot(3, 10, offset + idx + 1)\n","    plt.xticks([])\n","    plt.yticks([])\n","    image = np.reshape(image, shape)\n","    plt.imshow(image)\n","\n","\n","def display_results(disp_input_images, disp_predicted):\n","  '''Displays input and predicted images.'''\n","  plt.figure(figsize=(15, 5))\n","  display_one_row(disp_input_images, 0, shape=(IMAGE_SIZE,IMAGE_SIZE,3))\n","  display_one_row(disp_predicted, 20, shape=(IMAGE_SIZE,IMAGE_SIZE,3))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":497,"status":"ok","timestamp":1661090061696,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"Un_YgfuyqWl3","outputId":"c7422ee5-5c82-4c26-df48-83b1eaa1fc8b"},"outputs":[{"data":{"text/plain":["(60, 300, 300, 1)"]},"execution_count":158,"metadata":{},"output_type":"execute_result"}],"source":["vae_predicted.shape"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":587,"status":"ok","timestamp":1662291817323,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"owq0kU5LC7tG","outputId":"be034b5f-de0a-42a2-874b-4bfffcf9909d"},"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:tensorflow:Compiled the loaded model, but the compiled metrics have yet to be built. `model.compile_metrics` will be empty until you train or evaluate the model.\n"]}],"source":["vae_auto_models.save(r'/content/drive/MyDrive/Colab Notebooks/fianl_project/model/model300_singlevae_lat2500.h5')"]},{"cell_type":"code","execution_count":57,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1792,"status":"ok","timestamp":1662903881836,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"wcpdCeSwDZNz","outputId":"083f99f0-42dd-4680-a17a-5249ad692086"},"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:tensorflow:No training configuration found in the save file, so the model was *not* compiled. Compile it manually.\n"]}],"source":["vae_auto_models = tf.keras.models.load_model(r'/content/drive/MyDrive/Colab Notebooks/fianl_project/model/model300_singlevae_lat4000.h5')"]},{"cell_type":"code","execution_count":37,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":290},"executionInfo":{"elapsed":9390,"status":"ok","timestamp":1662902237896,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"7CrgF65f6eam","outputId":"b966dd92-6e35-4f83-b6a1-b5f0365930a9"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/tensorflow/python/data/ops/structured_function.py:265: UserWarning: Even though the `tf.config.experimental_run_functions_eagerly` option is set, this option does not apply to tf.data functions. To force eager execution of tf.data functions, please use `tf.data.experimental.enable_debug_mode()`.\n","  \"Even though the `tf.config.experimental_run_functions_eagerly` \"\n"]},{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 1.0, 'initial_img')"]},"metadata":{},"execution_count":37},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 2 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["def display_one_row(disp_images, offset, shape=(img_size, img_size)):\n","  '''Display sample outputs in one row.'''\n","  for idx, test_image in enumerate(disp_images):\n","    plt.subplot(3, 10, offset + idx + 1)\n","    plt.xticks([])\n","    plt.yticks([])\n","    test_image = np.reshape(test_image, shape)\n","    plt.imshow(test_image, cmap='gray')\n","\n","\n","def display_results(disp_input_images, disp_predicted,disp_expect, enc_shape=(8,4)):\n","  '''Displays the input, encoded, and decoded output values.'''\n","  plt.figure(figsize=(15, 5))\n","  display_one_row(disp_input_images, 0, shape=(img_size,img_size,))\n","  #display_one_row(disp_encoded, 10, shape=enc_shape)\n","  display_one_row(disp_expect, 10, shape=(img_size,img_size,))\n","  display_one_row(disp_predicted, 20, shape=(img_size,img_size,))\n","# take 1 batch of the dataset\n","#test_dataset = test_dataset.take(1)\n","\n","# take the input images and put them in a list\n","# output_samples = []\n","# for input_image in tfds.as_numpy(X_test):\n","#       output_samples = input_image\n","output_samples=data_contours\n","# pick 10 indices\n","idxs = np.array([395])\n","\n","# prepare test samples as a batch of 10 images\n","conv_output_samples = np.array(output_samples[idxs])\n","\n","conv_output_samples = np.reshape(conv_output_samples, (1,img_size,img_size, 1))\n","test_input_samples=np.array(initial_img[idxs])\n","test_input_samples_img = np.reshape(test_input_samples, (1,img_size,img_size, 1))\n","test_input_sample_signal=np.array(signal_data[idxs])\n","# get the encoder ouput\n","#encoded = convolutional_encoder_model.predict([test_input_samples_img,test_input_sample_signal])\n","\n","# get a prediction for some values in the dataset\n","predicted = vae_auto_models.predict([test_input_samples_img,test_input_sample_signal])\n","\n","# display the samples, encodings and decoded values!\n","#display_results(test_input_samples,predicted,conv_output_samples, enc_shape=(7,7))\n","predicteds=np.reshape(predicted,[300,300])\n","conv_output_samples=np.reshape(conv_output_samples,[300,300])\n","plt.subplot(1,2,1)\n","plt.title('predicted_img',color='blue') \n","plt.imshow(predicteds)\n","plt.subplot(1,2,2)\n","plt.imshow(conv_output_samples)\n","plt.title('initial_img',color='blue') "]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":46,"status":"ok","timestamp":1662301645760,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"Wcp4o1z2tlJP","outputId":"7a4e94b5-4b6e-4eb3-cd5e-e676dd7eb258"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.636661"]},"metadata":{},"execution_count":42}],"source":["np.max(predicteds)"]},{"cell_type":"markdown","metadata":{"id":"bbI7LRfG2yzH"},"source":["# IOU pipeline"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"objAtaNku--4"},"outputs":[],"source":["def binary(img,thresh):\n","  height, width = img.shape[0:2]\n","  for row in range(height):\n","    for col in range(width):\n","        # 获取到灰度值\n","        gray = img[row, col]\n","        # 如果灰度值高于阈值 就等于255最大值\n","        if gray > thresh:\n","            img[row, col] = 1\n","        # 如果小于阈值，就直接改为0\n","        elif gray < thresh:\n","            img[row, col] = 0\n","  return img"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":222},"executionInfo":{"elapsed":969,"status":"ok","timestamp":1662301646695,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"hO7SdOxrsPni","outputId":"46014be6-d8f1-4bde-b047-063c7e0fb95c"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.image.AxesImage at 0x7f7f2625ea10>"]},"metadata":{},"execution_count":44},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 2 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["\n","predicteds=predicteds*255\n","conv_output_samples=conv_output_samples*255\n","predicteds=binary(predicteds,60)\n","conv_output_samples=binary(conv_output_samples,60)\n","plt.subplot(1,2,1)\n","plt.imshow(predicteds)\n","plt.subplot(1,2,2)\n","plt.imshow(conv_output_samples)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":75,"status":"ok","timestamp":1662301646696,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"b0eB6-SAAsKe","outputId":"039e3c52-3feb-48c5-9f43-21376db0c329"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.9568717082381"]},"metadata":{},"execution_count":45}],"source":["def IOU(y_true, y_pred):\n","        \"\"\"\n","        y_true: Tensor，真实标签（one-hot类型），\n","        y_pred: Tensor，模型输出结果（one-hot类型），二者shape都为[N,H,W,C]或[N,H*W,C],C为总类别数,\n","        \"\"\"\n","        y_true = y_true.reshape(1,-1) # 求argmax后，展平为一维\n","        y_pred = y_pred.reshape(1,-1)\n","        intersection = np.sum(np.multiply(y_true.astype('bool'),y_pred == 1))\n","        union = np.sum((y_true.astype('bool')+y_pred.astype('bool'))>0) \n","        return intersection/union\n","num_classes=2\n","iou=IOU(predicteds,conv_output_samples)\n","iou\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":69,"status":"ok","timestamp":1662301646698,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"sYTHRsi733T5","outputId":"e700b722-9cb6-4561-ea5a-b7f8ffe596e8"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["120"]},"metadata":{},"execution_count":46}],"source":["y_test.shape[0]"]},{"cell_type":"code","source":["X_test.shape\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iPgU4XBmjDwF","executionInfo":{"status":"ok","timestamp":1662301646704,"user_tz":-480,"elapsed":70,"user":{"displayName":"秦时","userId":"13785341033606597227"}},"outputId":"f89fb381-30b3-4534-a0ff-3bd8f375ca2b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(120, 300, 300, 1)"]},"metadata":{},"execution_count":47}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jUNXDK7S24vc"},"outputs":[],"source":["iou_sum=0\n","false_count_075=[]\n","false_count_060=[]\n","false_count_090=[]\n","false_count_nb=[]\n","for i in range(0,y_test.shape[0]):\n","  output_samples=X_test\n","  # pick 10 indices\n","  idxs = np.array([i])\n","\n","  # prepare test samples as a batch of 10 images\n","  conv_output_samples = np.array(output_samples[idxs])\n","  conv_output_samples = np.reshape(conv_output_samples, (1,img_size,img_size, 1))\n","  test_input_samples=np.array(initial_img[idxs])\n","  test_input_samples_img = np.reshape(test_input_samples, (1,img_size,img_size, 1))\n","  test_input_sample_signal=np.array(y_test[idxs])\n","  # get the encoder ouput\n","  #encoded = convolutional_encoder_model.predict([test_input_samples_img,test_input_sample_signal])\n","\n","  # get a prediction for some values in the dataset\n","  predicted = vae_auto_models.predict([test_input_samples_img,test_input_sample_signal])\n","\n","  # display the samples, encodings and decoded values!\n","  #display_results(test_input_samples,predicted,conv_output_samples, enc_shape=(7,7))\n","  predicteds=np.reshape(predicted,[300,300])\n","  conv_output_samples=np.reshape(conv_output_samples,[300,300])\n","  predicteds=predicteds*255\n","  conv_output_samples=conv_output_samples*255\n","  # display the samples, encodings and decoded values!\n","  #display_results(test_input_samples,predicted,conv_output_samples, enc_shape=(7,7))\n","  predicteds=binary(predicteds,60)\n","  #print(\"the current one is \",i)\n","  conv_output_samples=binary(conv_output_samples,60)\n","  iou=IOU(predicteds,conv_output_samples)\n","  #print(\"the current img's iou is\",iou)\n","  iou_sum=iou_sum+iou\n","  if(iou>0.90):false_count_nb.append(i)\n","  if(iou<0.75 and iou>0.6):false_count_075.append(i)\n","  if(iou<0.90 and iou>0.75):false_count_090.append(i)\n","  if(iou<0.60):false_count_060.append(i)\n","miou=iou_sum/y_test.shape[0]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":19,"status":"ok","timestamp":1662301697637,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"5ZD2ZTDy4fhi","outputId":"30742d1f-92ed-4ca4-a827-7240e481d070"},"outputs":[{"output_type":"stream","name":"stdout","text":["the performance too bad at,below 60\n","33\n","43\n","64\n","66\n","69\n","74\n","the mean of iou is  0.8914464765912555\n","the num that NB is  88\n","the num that can't meet the 90 demand is  19\n","the num that can't meet the 75 demand is  7\n","the num that can't meet the 60 demand is  6\n"]}],"source":["print(\"the performance too bad at,below 60\")\n","for idx in false_count_060:\n","  print(idx)\n","print(\"the mean of iou is \",miou)\n","print(\"the num that NB is \",len(false_count_nb))\n","print(\"the num that can't meet the 90 demand is \",len(false_count_090))\n","print(\"the num that can't meet the 75 demand is \",len(false_count_075))\n","print(\"the num that can't meet the 60 demand is \",len(false_count_060))\n","\n","\n"]},{"cell_type":"code","source":["def get_rectangle_coord(img):\n","  img=img*255\n","  coord=[]\n","  img= np.array(img, dtype=np.uint8)\n","  # cv2.threshold：参数1是源图片, 参数2是阈值, 参数3是填充色, 参数4是阈值类型\n","  ret, thresh = cv2.threshold(img, 60, 255, cv2.THRESH_BINARY)\n","  black = cv2.cvtColor(np.zeros((img.shape[1], img.shape[0]), dtype=np.uint8), cv2.COLOR_GRAY2BGR)\n","\n","  contours, hier = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)\n","\n","  for cnt in contours:\n","    \n","    if (cv2.contourArea(cnt) < 2000 ):\n","        continue\n","    x, y, w, h = cv2.boundingRect(cnt)\n","    epsilon = 0.01 * cv2.arcLength(cnt,True)\n","    # cv2.approxPolyDP：参数1是轮廓，参数2是epsilon值，表源轮廓与近似多边形的最大差值，参数3是布尔标记，表示多边形是否闭合\n","    approx = cv2.approxPolyDP(cnt,epsilon,True)\n","    hull = cv2.convexHull(cnt) # 获取处理过的轮廓信息\n","    cv2.drawContours(black, [cnt], -1, (0, 255, 0), thickness=-1)\n","    coord.append([x,y])\n","    #cv2.drawContours(black, [approx], -1, (255, 255, 0), 2)\n","    #cv2.drawContours(black, [hull], -1, (0, 0, 255), 2)\n","#     kernel = np.ones(shape=[1,1],dtype=np.uint8)\n","#     black = cv2.erode(black,kernel=kernel)  # 腐蚀操作\n","  return coord,black\n","\n","def coord_loss(cores1,cores2):\n","  loss=0.542*abs(cores1-cores2)\n","  return loss\n"],"metadata":{"id":"FkfrbnQNBHmk"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["cores3,mask3=get_rectangle_coord(predicteds)\n","print(\"the coordinate of predicted image is \\n\",cores3)\n","plt.imshow(mask3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":323},"id":"qmlMKVJHBHpX","executionInfo":{"status":"ok","timestamp":1662296540500,"user_tz":-480,"elapsed":1137,"user":{"displayName":"秦时","userId":"13785341033606597227"}},"outputId":"51ad1a30-1d5d-4e9a-968d-ded20aaf0a9b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["the coordinate of predicted image is \n"," [[146, 16]]\n"]},{"output_type":"execute_result","data":{"text/plain":["<matplotlib.image.AxesImage at 0x7f2cc27b4a10>"]},"metadata":{},"execution_count":82},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["cores1,mask1=get_rectangle_coord(predicteds)\n","cores2,mask2=get_rectangle_coord(conv_output_samples)\n","cores1=np.array(cores1)\n","cores2=np.array(cores2)\n","loss=coord_loss(cores1,cores2)\n","plt.subplot(1,2,1)\n","plt.title('predicted_img',color='blue') \n","plt.imshow(mask1)\n","plt.subplot(1,2,2)\n","plt.title('initial_img',color='blue') \n","plt.imshow(mask2)\n","\n","print(\"the coordinate of predicted image is \\n\",cores1)\n","print(\"the coordinate of initail image is \\n\",cores2)\n","print(\"the loss of coordinate is \\n\",loss)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":323},"id":"_-gmK50sBHr9","executionInfo":{"status":"ok","timestamp":1662296541643,"user_tz":-480,"elapsed":1148,"user":{"displayName":"秦时","userId":"13785341033606597227"}},"outputId":"cae7e840-8098-45e9-f65c-9b0b66ae6f82"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["the coordinate of predicted image is \n"," [[146  16]]\n","the coordinate of initail image is \n"," [[154  15]]\n","the loss of coordinate is \n"," [[4.336 0.542]]\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 2 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["losses=[]\n","for i in range(0,y_test.shape[0]):\n","  output_samples=X_test\n","  # pick 10 indices\n","  idxs = np.array([i])\n","\n","  # prepare test samples as a batch of 10 images\n","  conv_output_samples = np.array(output_samples[idxs])\n","  conv_output_samples = np.reshape(conv_output_samples, (1,img_size,img_size, 1))\n","  test_input_samples=np.array(initial_img[idxs])\n","  test_input_samples_img = np.reshape(test_input_samples, (1,img_size,img_size, 1))\n","  test_input_sample_signal=np.array(y_test[idxs])\n","  # get the encoder ouput\n","  #encoded = convolutional_encoder_model.predict([test_input_samples_img,test_input_sample_signal])\n","\n","  # get a prediction for some values in the dataset\n","  predicted = vae_auto_models.predict([test_input_samples_img,test_input_sample_signal])\n","\n","  # display the samples, encodings and decoded values!\n","  #display_results(test_input_samples,predicted,conv_output_samples, enc_shape=(7,7))\n","  predicteds=np.reshape(predicted,[300,300])\n","  conv_output_samples=np.reshape(conv_output_samples,[300,300])\n","  predicteds=predicteds*255\n","  conv_output_samples=conv_output_samples*255\n","  # display the samples, encodings and decoded values!\n","  #display_results(test_input_samples,predicted,conv_output_samples, enc_shape=(7,7))\n","  predicteds=binary(predicteds,60)\n","  #print(\"the current one is \",i)\n","  conv_output_samples=binary(conv_output_samples,60)\n","  cores1,mask1=get_rectangle_coord(predicteds)\n","  cores2,mask2=get_rectangle_coord(conv_output_samples)\n","  cores1=np.array(cores1)\n","  cores2=np.array(cores2)\n","  loss=coord_loss(cores1,cores2)\n","  losses.append(loss)\n","  # print(\"the coordinate of predicted image is \\n\",cores1)\n","  # print(\"the coordinate of initail image is \\n\",cores2)\n","  # print(\"the loss of coordinate is \\n\",loss)\n","  # show_loss(loss)"],"metadata":{"id":"n_vI9MgzBHuw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["losses=np.array(losses)\n","losses=losses.reshape(120,2)\n","losses.shape\n"],"metadata":{"id":"9ryCyoZaBHxT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1662298221234,"user_tz":-480,"elapsed":562,"user":{"displayName":"秦时","userId":"13785341033606597227"}},"outputId":"675c42d7-1f8d-4668-d378-07a53d4df144"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(120, 2)"]},"metadata":{},"execution_count":104}]},{"cell_type":"code","source":["np.mean(losses,axis=0)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gXXAfFcsBHz4","executionInfo":{"status":"ok","timestamp":1662298222879,"user_tz":-480,"elapsed":3,"user":{"displayName":"秦时","userId":"13785341033606597227"}},"outputId":"3f0aadbe-90e5-471c-8905-564a3b4c513b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([2.77775   , 1.30983333])"]},"metadata":{},"execution_count":105}]},{"cell_type":"code","source":[],"metadata":{"id":"8miiP8U9BH2F"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"1n0BH4pYBH42"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"VVr8TicmBH8Y"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"HaX625BYoyMx"},"source":["#获取矩形坐标 pipeline"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"dVdRNBJsn7bk"},"outputs":[],"source":["def findcore(coordinates):\n","  cores=[]\n","  for coordinate in coordinates:\n","    x = coordinate[0]+coordinate[2]/2\n","    y = coordinate[1]+coordinate[3]/2\n","    cores.append([x,y])\n","    \n","  return np.array(cores)\n","def get_rectangle_coord(img):\n","  img=img*255\n","  img= np.array(img, dtype=np.uint8)\n","  mask = np.zeros(img.shape,dtype=np.uint8)\n","  ret, thresh = cv2.threshold(img, 127, 255, cv2.THRESH_BINARY)\n","  mask = np.zeros(img.shape,dtype=np.uint8)\n","  contours, hierarchy = cv2.findContours(thresh,cv2.RETR_TREE,cv2.CHAIN_APPROX_NONE)\n","  cv_contours = []\n","  coordinates=[]\n","  num=0\n","  for contour in contours:\n","      area = cv2.contourArea(contour)\n","      if area <= 500 and area>=70:\n","        #cv_contours.append(contour)\n","        x, y, w, h = cv2.boundingRect(contour)\n","        if(x+w<240 and h<40):\n","          cv2.drawContours(mask, contour, -1, (255), 1)\n","          coordinates.append([x,y,w,h])\n","          num=num+1\n","      else:\n","          continue\n","  print(num)\n","  cores=findcore(coordinates)\n","  return cores,mask\n","def coord_loss(cores1,cores2):\n","  loss=abs(cores1-cores2)/cores2\n","  return loss\n","def show_loss(losss):\n","  for i in range(0,4):\n","    print(\"the loss of x{} is {}%,the loss of y{} is {}%\".format(i,losss[i][0]*100,i,losss[i][1]*100))\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"bSOMjye1AZX4"},"outputs":[],"source":["coords=[]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":390},"executionInfo":{"elapsed":695,"status":"ok","timestamp":1658843495325,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"35dVWaiQhRoi","outputId":"873bf643-08f7-40b1-f5bf-852535009686"},"outputs":[{"name":"stdout","output_type":"stream","text":["4\n","the coordinate of predicted image is \n"," [[225.  274.5]\n"," [224.5 203.5]\n"," [224.5 121. ]\n"," [221.5  41.5]]\n"]},{"data":{"text/plain":["<matplotlib.image.AxesImage at 0x7f9874a61e50>"]},"execution_count":54,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["cores3,mask3=get_rectangle_coord(stright_line)\n","print(\"the coordinate of predicted image is \\n\",cores3)\n","plt.imshow(mask3)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5,"status":"ok","timestamp":1658843495325,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"F3Zt7ScFlKsN","outputId":"7e821347-a0ce-419e-915a-6a8010154f2d"},"outputs":[{"data":{"text/plain":["array([225. , 224.5, 224.5, 221.5])"]},"execution_count":55,"metadata":{},"output_type":"execute_result"}],"source":["cores3[:,0]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":414},"executionInfo":{"elapsed":1078,"status":"error","timestamp":1659085707675,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"EmZhrUghovE-","outputId":"91cbe05a-9a3d-40be-e631-128871c60ac2"},"outputs":[{"name":"stdout","output_type":"stream","text":["3\n","4\n"]},{"ename":"ValueError","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-87-06375d7bdd64>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mcores1\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcores1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mcores2\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcores2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mloss\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcoord_loss\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcores1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcores2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msubplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtitle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'predicted_img'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcolor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'blue'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-84-5ef0d6f3a68c>\u001b[0m in \u001b[0;36mcoord_loss\u001b[0;34m(cores1, cores2)\u001b[0m\n\u001b[1;32m     32\u001b[0m   \u001b[0;32mreturn\u001b[0m \u001b[0mcores\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mmask\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     33\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mcoord_loss\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcores1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcores2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 34\u001b[0;31m   \u001b[0mloss\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mabs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcores1\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0mcores2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mcores2\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     35\u001b[0m   \u001b[0;32mreturn\u001b[0m \u001b[0mloss\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     36\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mshow_loss\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlosss\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: operands could not be broadcast together with shapes (3,2) (4,2) "]}],"source":["cores1,mask1=get_rectangle_coord(predicteds)\n","cores2,mask2=get_rectangle_coord(conv_output_samples)\n","cores1=np.array(cores1)\n","cores2=np.array(cores2)\n","loss=coord_loss(cores1,cores2)\n","plt.subplot(1,2,1)\n","plt.title('predicted_img',color='blue') \n","plt.imshow(mask1)\n","plt.subplot(1,2,2)\n","plt.title('initial_img',color='blue') \n","plt.imshow(mask2)\n","\n","print(\"the coordinate of predicted image is \\n\",cores1)\n","print(\"the coordinate of initail image is \\n\",cores2)\n","print(\"the loss of coordinate is \\n\",loss)\n","show_loss(loss)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":169},"executionInfo":{"elapsed":361,"status":"error","timestamp":1658843708746,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"5sYS3fzeBggi","outputId":"0e5ceb12-72be-42c1-ef42-8ca780c0b066"},"outputs":[{"ename":"AttributeError","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-64-b5e3758b03f2>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mcoords\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcores1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mAttributeError\u001b[0m: 'numpy.ndarray' object has no attribute 'append'"]}],"source":["coords.append(cores1)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"E3ioo6JuBJdc"},"outputs":[],"source":["coords=np.array(coords)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":169},"executionInfo":{"elapsed":3,"status":"error","timestamp":1658843497337,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"Bxwlh2q2bETD","outputId":"e21a9230-c1d1-4c90-8f77-dad46f611d95"},"outputs":[{"ename":"IndexError","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-59-ac3290eb4eb9>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mcoords\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mIndexError\u001b[0m: index 1 is out of bounds for axis 0 with size 1"]}],"source":["coords[1].shape"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":812,"status":"ok","timestamp":1658669959130,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"3HR4jy4abj8a","outputId":"75aabd5d-2d46-460c-d744-aa5f3dd91c96"},"outputs":[{"name":"stdout","output_type":"stream","text":["[[225.5 276.5]\n"," [217.  205. ]\n"," [183.5 131.5]\n"," [125.5  82.5]]\n","[[225.5 276.5]\n"," [217.  205. ]\n"," [183.5 131.5]\n"," [125.5  82.5]]\n","[[225.5 276.5]\n"," [217.  205. ]\n"," [183.5 131.5]\n"," [125.5  82.5]]\n"]}],"source":["for i in range(1,4):\n","  print(coords[1])"]},{"cell_type":"markdown","metadata":{"id":"D-IbCz7iJfzC"},"source":["## 像素转化为毫米/pixels to mm"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":560,"status":"ok","timestamp":1658844233968,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"PaoKq0gSJe90","outputId":"4c52cd5f-a14a-4a2b-c394-0f530b56ba93"},"outputs":[{"data":{"text/plain":["array([[ 0.   ,  0.   ],\n","       [ 5.42 , 37.94 ],\n","       [29.539, 75.067],\n","       [67.208, 88.075]])"]},"execution_count":86,"metadata":{},"output_type":"execute_result"}],"source":["def get_refer(coord):\n","  refer=[]\n","  trans_factor=0.542\n","  for i in range(1,4):\n","    dis_x=(coord[0][0]-coord[i][0])*trans_factor\n","    dis_y=(coord[0][1]-coord[i][1])*trans_factor\n","    refer.append([dis_x,dis_y])\n","  refer.append([0,0])\n","  return refer\n","refer=np.array(get_refer(cores2))\n","refer=np.sort(refer,axis=0)\n","refer\n","                \n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":362,"status":"ok","timestamp":1658844266034,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"R2iEjAZkMTGg","outputId":"ed175ebc-10a0-46d3-bf81-d10f8d5c67e5"},"outputs":[{"data":{"text/plain":["array([ 0.   , 37.94 , 75.067, 88.075])"]},"execution_count":88,"metadata":{},"output_type":"execute_result"}],"source":["refer[:,1]"]},{"cell_type":"markdown","metadata":{"id":"I70gBIqdEvJz"},"source":["## interpolation"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":268},"executionInfo":{"elapsed":1571,"status":"ok","timestamp":1658670011275,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"uagrw-VXEzG9","outputId":"904fdbac-758a-459f-95b0-2de6d53b4876"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["# -*-coding:utf-8 -*-\n","import numpy as np\n","from scipy import interpolate\n","import pylab as pl\n","\n","x=refer[:,0]\n","#x=[  0.   1.   2.   3.   4.   5.   6.   7.   8.   9.  10.]\n","y=refer[:,1]\n","xnew=np.linspace(0,76,num=50)\n","pl.plot(x,y,\"ro\")\n","\n","for kind in [\"nearest\",\"zero\",\"slinear\"]:#插值方式\n","    #\"nearest\",\"zero\"为阶梯插值\n","    #slinear 线性插值\n","    #\"quadratic\",\"cubic\" 为2阶、3阶B样条曲线插值\n","    f=interpolate.interp1d(x,y,kind=kind)\n","    # ‘slinear’, ‘quadratic’ and ‘cubic’ refer to a spline interpolation of first, second or third order)\n","    ynew=f(xnew)\n","    pl.plot(xnew,ynew,label=str(kind))\n","pl.legend(loc=\"lower right\")\n","pl.show()"]},{"cell_type":"markdown","metadata":{"id":"uW8OLd9iHd0B"},"source":["# IOU 实现\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":222},"executionInfo":{"elapsed":715,"status":"ok","timestamp":1661056947481,"user":{"displayName":"秦时","userId":"13785341033606597227"},"user_tz":-480},"id":"wGp9pEfYsh2G","outputId":"15037322-23a5-4ebe-f90e-7383b2ed2880"},"outputs":[{"data":{"text/plain":["<matplotlib.image.AxesImage at 0x7f0636e68f90>"]},"execution_count":119,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pi-JqlYgsxTU"},"outputs":[],"source":[]}],"metadata":{"accelerator":"GPU","colab":{"collapsed_sections":["Dsyen2HgVR3c"],"machine_shape":"hm","provenance":[{"file_id":"1OMkR6PxoiSY594sxbQkJbDRbig5LQSXU","timestamp":1658997653805}],"toc_visible":true,"authorship_tag":"ABX9TyNZAClzOhrWRU1gbEIx/MwG"},"gpuClass":"standard","kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}